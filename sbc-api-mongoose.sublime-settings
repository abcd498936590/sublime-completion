{
  "scope": "source.js - string, source.coffee, source.js.embedded.html",

  "completions":
  [
    // Mongoose
    [ "mongo\tMongoDB - Mongoose", "mongo" ],
    [ "Types\tMongoDB - Mongoose", "Types" ],
    [ "Schema\tMongoDB - Mongoose", "Schema" ],
    [ "mquery\tMongoDB - Mongoose", "mquery" ],
    [ "version\tMongoDB - Mongoose", "version" ],
    [ "Promise\tMongoDB - Mongoose", "Promise" ],
    [ "mongoose\tMongoDB - Mongoose", "mongoose" ],
    [ "SchemaTypes\tMongoDB - Mongoose", "SchemaTypes" ],
    [ "collections\tMongoose - Mongoose", "collections" ],
    [ "prototypeSTATES\tMongoDB - Mongoose", "prototypeSTATES" ],
    [ "plugin()\tMongoDB - Mongoose", "plugin(fn${1:[options]})" ],
    [ "pluralize()\tMongoDB - Mongoose", "pluralize(${1:[fn]})" ],
    [ "Query()\tMongoDB - Mongoose", "Query()" ],
    [ "Schema()\tMongoDB - Mongoose", "Schema()" ],
    [ "VirtualType()\tMongoDB - Mongoose", "VirtualType()" ],
    [ "Mongoose()\tMongoDB - Mongoose", "Mongoose()" ],
    [ "Aggregate()\tMongoDB - Mongoose", "Aggregate()" ],
    [ "Collection()\tMongoDB - Mongoose", "Collection()" ],
    [ "Connection()\tMongoDB - Mongoose", "Connection()" ],
    [ "SchemaType()\tMongoDB - Mongoose", "SchemaType()" ],
    [ "Document()\tMongoDB - Mongoose", "Document()" ],
    [ "Error()\tMongoDB - Mongoose", "Error()" ],
    [ "Model()\tMongoDB - Mongoose", "Model()" ],
    [ "modelNames()\tMongoDB - Mongoose", "modelNames()" ],
    [ "DocumentProvider()\tMongoDB - Mongoose", "DocumentProvider()" ],
    [ "PromiseProvider()\tMongoDB - Mongoose", "PromiseProvider()" ],
    [ "connection\tMongoDB - Mongoose", "connection" ],
    [ "CastError()\tMongoDB - Mongoose", "CastError(type, value, path${1:[, reason]})" ],
    [ "VirtualType\tMongoDB - Mongoose", "VirtualType" ],
    [ "disconnect()\tMongoDB - Mongoose", "disconnect(${1:callback})" ],
    [ "CastError()\tMongoDB - Mongoose", "CastError(type, value, path${1:[, reason]})" ],
    [ "connect()\tMongoose - Mongoose", "connect(url${1:[, options, user, pass, autoIndex, bufferCommands, callback.err]})" ],
    [ "createConnection()\tMongoose - Connections", "createConnection(url${1:[, options, user, pass, bufferCommands]})" ],
    [ "get()\tMongoDB - Mongoose", "get(${1:key})" ],
    [ "set()\tMongoDB - Mongoose", "set(${1:key}, value)" ],
    [ "model()\tMongoDB - Mongoose", "model(name${1:[, schema, collection, skipInit]})" ],

    // Event
    [ "open\tMongoose - Event", "open" ],
    [ "close\tMongoose - Event", "close" ],
    [ "disconnect\tMongoose - Event", "disconnect" ],

    // Connection
    [ "db\tMongoose - Connections", "db" ],
    [ "host\tMongoose - Connections", "host" ],
    [ "user\tMongoose - Connections", "user" ],
    [ "name\tMongoose - Connections", "name" ],
    [ "pass\tMongoose - Connections", "pass" ],
    [ "port\tMongoose - Connections", "port" ],
    [ "config\tMongoose - Connections", "config" ],
    [ "readyState\tMongoose - Connections", "readyState" ],
    [ "modelNames()\tMongoose - Connections", "modelNames()" ],
    [ "Connection()\tMongoose - Connections", "Connection(${1:base})" ],
    [ "dropDatabase()\tMongoose - Connections", "dropDatabase(${1:[callback.err]})" ],
    [ "dropCollection()\tMongoose - Connections", "dropCollection(collection${1:[, callback.err]})" ],
    [ "collection()\tMongoose - Connections", "collection(name${1:[, options]})" ],
    [ "close()\tMongoose - Connections", "close(${1:[force, callback]})" ],
    [ "model()\tMongoose - Connections", "model(name${1:[, schema, collection]})" ],

    // Document
    [ "id\tMongoose - Document", "id" ],
    [ "isNew\tMongoose - Document", "isNew" ],
    [ "schema\tMongoose - Document", "schema" ],
    [ "errors\tMongoose - Document", "errors" ],
    [ "save()\tMongoose - Document", "save(${1:[options, safe, validateBeforeSave, fn.err.product]})" ],
    [ "validateSync()\tMongoose - Document", "validateSync(${1:[array|string]})" ],
    [ "validate()\tMongoose - Document", "validate(${1:optional}, callback.err)" ],
    [ "get()\tMongoose - Document", "get(path${1:[, type]})" ],
    [ "inspect()\tMongoose - Document", "inspect()" ],
    [ "toJSON()\tMongoose - Document", "toJSON(${1:options})" ],
    [ "unmarkModified()\tMongoose - Document", "unmarkModified(${1:path})" ],
    [ "update()\tMongoose - Document", "update(${1:doc}, options, callback.err)" ],
    [ "toObject()\tMongoose - Document", "toObject(${1:[options]})" ],
    [ "set()\tMongoose - Document", "set(path, val${1:[, type, options]})" ],
    [ "product()\tMongoose - Document", "product(${[options, safe, validateBeforeSave, fn.err.product]})" ],
    [ "populate()\tMongoose - Document", "populate(${1:path, callback.err.result})" ],
    [ "invalidate()\tMongoose - Document", "invalidate(path, errorMsg, value${1:[, kind]})" ],
    [ "execPopulate()\tMongoose - Document", "execPopulate()" ],
    [ "init()\tMongoose - Document", "init(${1:doc})" ],
    [ "populated()\tMongoose - Document", "populated(${1:path})" ],
    [ "isInit()\tMongoose - Document", "isInit(${1:doc})" ],
    [ "isSelected()\tMongoose - Document", "isSelected(${1:path})" ],
    [ "modifiedPaths()\tMongoose - Document", "modifiedPaths(${1:[options, includeChildren]})" ],
    [ "markModified()\tMongoose - Document", "markModified(path${1:[, scope]})" ],
    [ "isModified()\tMongoose - Document", "isModified(${1:[path]})" ],
    [ "isDirectModified()\tMongoose - Document", "isDirectModified(${1:path})" ],
    [ "isDirectSelected()\tMongoose - Document", "isDirectSelected(${1:path})" ],
    [ "equals()\tMongoose - Document", "equals(${1:doc})" ],
    [ "$ignore()\tMongoose - Document", "ignore(${1:path})" ],
    [ "$markValid()\tMongoose - Document", "markValid(${1:path})" ],
    [ "$depopulate()\tMongoose - Document", "depopulate(${1:path})" ],
    [ "$set()\tMongoose - Document", "set(path, val${1:[, type, options]})" ],
    [ "$isDefault()\tMongoose - Document", "isDefault(${1:[path]})" ],
    [ "$isDeleted()\tMongoose - Document", "isDeleted(${1:[val]})" ],

    // Schema
    [ "obj\tMongoose - Schema", "obj" ],
    [ "query\tMongoose - Schema", "query" ],
    [ "statics\tMongoose - Schema", "statics" ],
    [ "methods\tMongoose - Schema", "methods" ],
    [ "reserved\tMongoose - Schema", "reserved" ],
    [ "childSchemas\tMongoose - Schema", "childSchemas" ],
    [ "clone()\tMongoose - Schema", "clone()" ],
    [ "get()\tMongoose - Schema", "get(${1:key})" ],
    [ "pathType()\tMongoose - Schema", "pathType(${1:path})" ],
    [ "remove()\tMongoose - Schema", "remove(${1:path})" ],
    [ "set()\tMongoose - Schema", "set(key${1:[, value]})" ],
    [ "requiredPaths()\tMongoose - Schema", "requiredPaths(${1:invalidate})" ],
    [ "indexes()\tMongoose - Schema", "indexes()" ],
    [ "queue()\tMongoose - Schema", "queue(${1:method}, args)" ],
    [ "post(sync)\tMongoose - Schema", "post(${1:method}, callback.docs)" ],
    [ "post(async)\tMongoose - Schema", "post(${1:method}, callback.docs.next)" ],
    [ "pre(async)\tMongoose - Schema", "pre(${1:method}, callback.next)" ],
    [ "pre(sync)\tMongoose - Schema", "pre(method, ${1:boolean}, callback.next.done)" ],
    [ "method()\tMongoose - Schema", "method(method${1:[, fn]})" ],
    [ "static()\tMongoose - Schema", "static(name${1:[, fn]})" ],
    [ "plugin()\tMongoose - Schema", "plugin(plugin${1:[, options]})" ],
    [ "loadClass()\tMongoose - Schema", "loadClass(model${1:[, virtualsOnly]})" ],
    [ "index()\tMongoose - Schema", "index(fields${1:[, options, expires]})" ],
    [ "Schema()\tMongoose - Schema", "Schema(object${1:[, options]})" ],
    [ "add()\tMongoose - Schema", "add(${1:obj}, prefix)" ],
    [ "eachPath()\tMongoose - Schema", "eachPath(${1:callback.err})" ],
    [ "path()\tMongoose - Schema", "path(path${1:[, constructor]})" ],
    [ "virtual()\tMongoose - Schema", "virtual(name${1:[, options]})" ],
    [ "virtualpath()\tMongoose - Schema", "virtualpath(${1:name})" ],
    // Schema.Types类型
    [ "Mixed\tMongoose - Types", "Mixed" ],
    [ "ObjectId\tMongoose - Types", "ObjectId" ],
    [ "Decimal128\tMongoose - Types", "Decimal128" ],
    [ "SubDocument\tMongoose - Types", "SubDocument" ],
    [ "DocumentArray\tMongoose - Types", "DocumentArray" ],

    // Schematype
    [ "Schematype()\tMongoose - Schematype", "Schematype(path${1:[, options, instance]})" ],
    [ "default()\tMongoose - Schematype", "default(${1:val})" ],
    [ "sparse()\tMongoose - Schematype", "sparse(${1:boolean})" ],
    [ "text()\tMongoose - Schematype", "text(${1:boolean})" ],
    [ "unique()\tMongoose - Schematype", "unique(${1:boolean})" ],
    [ "validate()\tMongoose - Schematype", "validate(obj${1:[, errorMsg, type]})" ],
    [ "get()\tMongoose - Schematype", "get(${1:fn.val})" ],
    [ "index()\tMongoose - Schematype", "index(${1:options})" ],
    [ "required()\tMongoose - Schematype", "required(required${1:[, isRequired, ErrorConstructor, message]})" ],
    [ "select()\tMongoose - Schematype", "select(${1:val})" ],
    [ "set()\tMongoose - Schematype", "set(${1:fn.val})" ],

    // Virtualtype
    [ "applyGetters()\tMongoose - Schematype", "applyGetters(${1:value}, scope)" ],
    [ "applySetters()\tMongoose - Schematype", "applySetters(${1:value}, scope)" ],
    [ "get()\tMongoose - Schematype", "get(${1:fn})" ],
    [ "set()\tMongoose - Schematype", "set(${1:fn.val})" ],

    // Model
    [ "schema\tMongoose - Model", "schema" ],
    [ "Model()\tMongoose - Model", "Model(${1:doc})" ],
    [ "model()\tMongoose - Model", "model(${1:name})" ],
    [ "watch()\tMongoose - Model", "watch(${1:[pipeline, options]})" ],
    [ "translateAliases()\tMongoose - Model", "translateAliases(${1:raw})" ],
    [ "remove()\tMongoose - Model", "remove(conditions${1:[, callback.err]})" ],
    [ "update()\tMongoose - Model", "update(conditions, doc${1:[, options]}, callback.err.query)" ],
    [ "updateMany()\tMongoose - Model", "updateMany(conditions, doc${1:[, options, callback.err.query]})" ],
    [ "updateOne()\tMongoose - Model", "updateOne(conditions, doc${1:[, options, callback.err.query]})" ],
    [ "replaceOne()\tMongoose - Model", "replaceOne(conditions, doc${1:[, options, callback.err]})" ],
    [ "save()\tMongoose - Model", "save(${1:[options, safe, validateBeforeSave, fn.err.product]})" ],
    [ "db\tMongoose - Model", "db" ],
    [ "base\tMongoose - Model", "base" ],
    [ "schema\tMongoose - Model", "schema" ],
    [ "modelName\tMongoose - Model", "modelName" ],
    [ "collection\tMongoose - Model", "collection" ],
    [ "baseModelName\tMongoose - Model", "baseModelName" ],
    [ "discriminators\tMongoose - Model", "discriminators" ],
    [ "$where\tMongoose - Model", "\\$where" ],
    [ "remove()\tMongoose - Model", "remove(${1[fn.err.product]})" ],
    [ "increment()\tMongoose - Model", "increment()" ],
    [ "where()\tMongoose - Model", "where(path${1:[, val]})" ],
    [ "$where()\tMongoose - Model", "where(${1:arg})" ],
    [ "hydrate()\tMongoose - Model", "hydrate(${1:object})" ],
    [ "init()\tMongoose - Model", "init(${1:[callback]})" ],
    [ "geoSearch()\tMongoose - Model", "geoSearch(conditions, options${1:[, lean, callback.err.res]})" ],
    [ "findOne()\tMongoose - Model", "findOne(${1:[conditions, projection, options, callback.err.adventure]})" ],
    [ "find()\tMongoose - Model", "find(conditions${1:[, projection, options, callback.err.docs]})" ],
    [ "findById()\tMongoose - Model", "findById(id${1:[, projection, options, callback.err.docs]})" ],
    [ "findOneAndRemove()\tMongoose - Model", "findOneAndRemove(conditions${1:[, options, callback.err]})" ],
    [ "findOneAndUpdate()\tMongoose - Model", "findOneAndUpdate(${1:[conditions, update, options, lean, callback.err]})" ],
    [ "findByIdAndUpdate()\tMongoose - Model", "findByIdAndUpdate(id${1:[, update, options, lean, callback.err.docs]})" ],
    [ "findByIdAndRemove()\tMongoose - Model", "findByIdAndRemove(id${1:[, options, callback.err.docs]})" ],
    [ "distinct()\tMongoose - Model", "distinct(field${1:[, conditions, callback.err.result]})" ],
    [ "discriminator()\tMongoose - Model", "discriminator(${1:name}, schema, value)" ],
    [ "insertMany()\tMongoose - Model", "insertMany(docs${1:[, options, ordered, rawResult, callback.err.docs]})" ],
    [ "deleteMany()\tMongoose - Model", "deleteMany(conditions${1:[, callback.err]})" ],
    [ "deleteOne()\tMongoose - Model", "deleteOne(conditions${1:[, callback.err]})" ],
    [ "createIndexes()\tMongoose - Model", "createIndexes(${1:[options, callback.err]})" ],
    [ "ensureIndexes()\tMongoose - Model", "ensureIndexes(${1:[options, callback.err]})" ],
    [ "create()\tMongoose - Model", "create(${1:doc}, callback.err.docs)" ],
    [ "aggregate()\tMongoose - Model", "aggregate(${1:[pipeline, callback.err.docs]})" ],
    [ "bulkWrite()\tMongoose - Model", "bulkWrite(pipeline${1:[, options, callback.err.bulkWriteOpResult]})" ],
    [ "count()\tMongoose - Model", "count(conditions${1:[, callback.err.count]})" ],
    [ "mapReduce()\tMongoose - Model", "mapReduce(object${1:[, callback.err.result]})" ],
    [ "populate()\tMongoose - Model", "populate(docs, options${1:[, callback.err.doc]})" ],

    // Options
    [ "set\tMongoose - Options", "set" ],
    [ "get\tMongoose - Options", "get" ],
    [ "min\tMongoose - Options", "min" ],
    [ "max\tMongoose - Options", "max" ],
    [ "type\tMongoose - Options", "type" ],
    [ "trim\tMongoose - Options", "trim" ],
    [ "enum\tMongoose - Options", "enum" ],
    [ "alias\tMongoose - Options", "alias" ],
    [ "index\tMongoose - Options", "index" ],
    [ "unique\tMongoose - Options", "unique" ],
    [ "sparse\tMongoose - Options", "sparse" ],
    [ "isAsync\tMongoose - Options", "isAsync" ],
    [ "default\tMongoose - Options", "default" ],
    [ "validate\tMongoose - Options", "validate" ],
    [ "required\tMongoose - Options", "required" ],
    [ "collation\tMongoose - Options", "collation" ],
    [ "lowercase\tMongoose - Options", "lowercase" ],
    [ "uppercase\tMongoose - Options", "uppercase" ],
    [ "collection\tMongoose - Options", "collection" ],
    [ "skipVersioning\tMongoose - Options", "skipVersioning" ],
    [ "useNestedStrict\tMongoose - Options", "useNestedStrict" ],
    [ "discriminatorKey\tMongoose - Options", "discriminatorKey" ],
    [ "new\tMongoose - Options", "new" ],
    [ "out*\tMongoose - Options", "out*" ],
    [ "path\tMongoose - Options", "path" ],
    [ "read\tMongoose - Options", "read" ],
    [ "model\tMongoose - Options", "model" ],
    [ "match\tMongoose - Options", "match" ],
    [ "toJSON\tMongoose - Options", "toJSON" ],
    [ "toObject\tMongoose - Options", "toObject" ],
    [ "sort\tMongoose - Options", "sort" ],
    [ "lean\tMongoose - Options", "lean" ],
    [ "scope\tMongoose - Options", "scope" ],
    [ "merge\tMongoose - Options", "merge" ],
    [ "jsMode\tMongoose - Options", "jsMode" ],
    [ "verbose\tMongoose - Options", "verbose" ],
    [ "inline\tMongoose - Options", "inline" ],
    [ "reduce\tMongoose - Options", "reduce" ],
    [ "replace\tMongoose - Options", "replace" ],
    [ "getters\tMongoose - Options", "getters" ],
    [ "virtuals\tMongoose - Options", "virtuals" ],
    [ "minimize\tMongoose - Options", "minimize" ],
    [ "transform\tMongoose - Options", "transform" ],
    [ "depopulate\tMongoose - Options", "depopulate" ],
    [ "versionKey\tMongoose - Options", "versionKey" ],
    [ "safe\tMongoose - Options", "safe" ],
    [ "near\tMongoose - Options", "near" ],
    [ "query\tMongoose - Options", "query" ],
    [ "limit\tMongoose - Options", "limit" ],
    [ "multi\tMongoose - Options", "multi" ],
    [ "strict\tMongoose - Options", "strict" ],
    [ "upsert\tMongoose - Options", "upsert" ],
    [ "fields\tMongoose - Options", "fields" ],
    [ "select\tMongoose - Options", "select" ],
    [ "context\tMongoose - Options", "context" ],
    [ "keeptemp\tMongoose - Options", "keeptemp" ],
    [ "finalize\tMongoose - Options", "finalize" ],
    [ "overwrite\tMongoose - Options", "overwrite" ],
    [ "maxTimeMS\tMongoose - Options", "maxTimeMS" ],
    [ "rawResult\tMongoose - Options", "rawResult" ],
    [ "maxDistance\tMongoose - Options", "maxDistance" ],
    [ "rawResponse\tMongoose - Options", "rawResponse" ],
    [ "allowDiskUse\tMongoose - Options", "allowDiskUse" ],
    [ "runValidators\tMongoose - Options", "runValidators" ],
    [ "readPreference\tMongoose - Options", "readPreference" ],
    [ "setDefaultsOnInsert\tMongoose - Options", "setDefaultsOnInsert" ],
    [ "id\tMongoose - Options", "id" ],
    [ "_id\tMongoose - Options", "_id" ],
    [ "capped\tMongoose - Options", "capped" ],
    [ "strict\tMongoose - Options", "strict" ],
    [ "typeKey\tMongoose - Options", "typeKey" ],
    [ "shardKey\tMongoose - Options", "shardKey" ],
    [ "minimize\tMongoose - Options", "minimize" ],
    [ "updatedAt\tMongoose - Options", "updatedAt" ],
    [ "createdAt\tMongoose - Options", "createdAt" ],
    [ "autoIndex\tMongoose - Options", "autoIndex" ],
    [ "timestamps\tMongoose - Options", "timestamps" ],
    [ "versionKey\tMongoose - Options", "versionKey" ],
    [ "strictQuery\tMongoose - Options", "strictQuery" ],
    [ "dontVersionMe\tMongoose - Options", "dontVersionMe" ],
    [ "bufferCommands\tMongoose - Options", "bufferCommands" ],
    [ "validateBeforeSave\tMongoose - Options", "validateBeforeSave" ],
    [ "pass\tMongoose - Options", "pass" ],
    [ "user\tMongoose - Options", "user" ],
    [ "dbName\tMongoose - Options", "dbName" ],
    [ "poolSize\tMongoose - Options", "poolSize" ],
    [ "keepAlive\tMongoose - Options", "keepAlive" ],
    [ "autoReconnect\tMongoose - Options", "autoReconnect" ],
    [ "promiseLibrary\tMongoose - Options", "promiseLibrary" ],
    [ "reconnectTries\tMongoose - Options", "reconnectTries" ],
    [ "connectTimeoutMS\tMongoose - Options", "connectTimeoutMS" ],
    [ "bufferMaxEntries\tMongoose - Options", "bufferMaxEntries" ],
    [ "reconnectInterval\tMongoose - Options", "reconnectInterval" ],

    // Aggregate
    [ "addCursorFlag()\tMongoose - Aggregate", "addCursorFlag(${1:flog}, value)" ],
    [ "addFields()\tMongoose - Aggregate", "addFields(${1:arg})" ],
    [ "count()\tMongoose - Aggregate", "count(${1:the})" ],
    [ "cursor()\tMongoose - Aggregate", "cursor(options, batchSize${1:[, useMongooseAggCursor]})" ],
    [ "append()\tMongoose - Aggregate", "append(${1:options})" ],
    [ "facet()\tMongoose - Aggregate", "facet(${1:facet})" ],
    [ "group()\tMongoose - Aggregate", "group(${1:arg})" ],
    [ "limit()\tMongoose - Aggregate", "limit(${1:number})" ],
    [ "lookup()\tMongoose - Aggregate", "lookup(${1:options})" ],
    [ "match()\tMongoose - Aggregate", "match(${1:arg})" ],
    [ "model()\tMongoose - Aggregate", "model(${1:model})" ],
    [ "near()\tMongoose - Aggregate", "near(${1:object})" ],
    [ "sample()\tMongoose - Aggregate", "sample(${1:size})" ],
    [ "skip()\tMongoose - Aggregate", "skip(${1:number})" ],
    [ "sort()\tMongoose - Aggregate", "sort(${1:arg})" ],
    [ "unwind()\tMongoose - Aggregate", "unwind(${1:fields})" ],
    [ "sortByCount()\tMongoose - Aggregate", "sortByCount(${1:arg})" ],
    [ "replaceRoot()\tMongoose - Aggregate", "replaceRoot(${1:the})" ],
    [ "read()\tMongoose - Aggregate", "read(pref${1:[, tags]})" ],
    [ "project()\tMongoose - Aggregate", "project(${1:object|string})" ],
    [ "pipeline()\tMongoose - Aggregate", "pipeline()" ],
    [ "option()\tMongoose - Aggregate", "option(${1:object})" ],
    [ "hint()\tMongoose - Aggregate", "hint(${1:object|string})" ],
    [ "graphLookup()\tMongoose - Aggregate", "graphLookup(${1:options})" ],
    [ "explain()\tMongoose - Aggregate", "explain(${1:callback})" ],
    [ "exec()\tMongoose - Aggregate", "exec(${1:[callback.err.docs]})" ],
    [ "collation()\tMongoose - Aggregate", "collation(${1:collation})" ],
    [ "allowDiskUse()\tMongoose - Aggregate", "allowDiskUse(value${1:[, tags]})" ],

    // Aggregation - Cursor
    [ "AggregationCursor()\tMongoose - AggCursor", "AggregationCursor(${1:agg}, options)" ],
    [ "addCursorFlag()\tMongoose - AggCursor", "addCursorFlag(${1:falog}, value)" ],
    [ "close()\tMongoose - AggCursor", "close(${1:callback})" ],
    [ "map()\tMongoose - AggCursor", "map(${1:fn.doc})" ],
    [ "next()\tMongoose - AggCursor", "next(${1:callback.doc})" ],
    [ "eachAsync()\tMongoose - AggCursor", "eachAsync(fn${1:[, options, parallel, callback]})" ],

    // Querys
    [ "use\tMongoose - Query", "use" ],
    [ "$within\tMongoose - Query", "\\$within" ],
    [ "$geoWithin\tMongoose - Query", "\\$geoWithin" ],
    [ "setOptions()\tMongoose - Query", "setOptions(${1:options}, overwrite)" ],
    [ "collection()\tMongoose - Query", "collection(${1:coll})" ],
    [ "sort()\tMongoose - Query", "sort(${1:arg})" ],
    [ "tailable()\tMongoose - Query", "tailable(boolean${1:[, options, numberOfRetries, tailableRetryInterval]})" ],
    [ "lean()\tMongoose - Query", "lean(${1:[boolean]})" ],
    [ "snapshot()\tMongoose - Query", "snapshot(${1:[boolean]})" ],
    [ "within()\tMongoose - Query", "within(${1:[query]})" ],
    [ "skip()\tMongoose - Query", "skip(${1:val})" ],
    [ "slaveOk()\tMongoose - Query", "slaveOk(${1:boolean})" ],
    [ "where()\tMongoose - Query", "where(${1:[path, val]})" ],
    [ "geometry()\tMongoose - Query", "geometry(${1:object})" ],
    [ "setOptions()\tMongoose - Query", "setOptions(${1:options})" ],
    [ "hint()\tMongoose - Query", "hint(${1:val})" ],
    [ "read()\tMongoose - Query", "read(pref${1:[, tags]})" ],
    [ "merge()\tMongoose - Query", "merge(${1:source})" ],
    [ "nearSphere()\tMongoose - Query", "nearSphere(${1:object})" ],
    [ "populate()\tMongoose - Query", "populate(path${1:[, select, model, match, options]})" ],
    [ "getQuery()\tMongoose - Query", "getQuery()" ],
    [ "getUpdate()\tMongoose - Query", "getUpdate()" ],
    [ "toConstructor()\tMongoose - Query", "toConstructor()" ],
    [ "exec()\tMongoose - Query", "exec(${1:[operation, ]}callback.err.docs)" ],
    [ "$where()\tMongoose - Query", "where(${1:string|function})" ],
    [ "in()\tMongoose - Query", "in(${1:[path, ]}val)" ],
    [ "gt()\tMongoose - Query", "gt(${1:[path, ]}val)" ],
    [ "ne()\tMongoose - Query", "ne(${1:[path, ]}val)" ],
    [ "lt()\tMongoose - Query", "lt(${1:[path, ]}val)" ],
    [ "nin()\tMongoose - Query", "nin(${1:[path, ]}val)" ],
    [ "mod()\tMongoose - Query", "mod(${1:[path, ]}val)" ],
    [ "lte()\tMongoose - Query", "lte(${1:[path, ]}val)" ],
    [ "gte()\tMongoose - Query", "gte(${1:[path, ]}val)" ],
    [ "all()\tMongoose - Query", "all(${1:[path, ]}val)" ],
    [ "size()\tMongoose - Query", "size(${1:[path, ]}val)" ],
    [ "slice()\tMongoose - Query", "slice(${1:[path, ]}val)" ],
    [ "regex()\tMongoose - Query", "regex(${1:[path, ]}val)" ],
    [ "and()\tMongoose - Query", "and(${1:array})" ],
    [ "or()\tMongoose - Query", "or(${1:array})" ],
    [ "nor()\tMongoose - Query", "nor(${1:array})" ],
    [ "select()\tMongoose - Query", "select(${1:arg})" ],
    [ "selected()\tMongoose - Query", "selected(${1:boolean})" ],
    [ "selectedInclusively()\tMongoose - Query", "selectedInclusively(${1:boolean})" ],
    [ "selectedExclusively()\tMongoose - Query", "selectedExclusively(${1:boolean})" ],
    [ "near()\tMongoose - Query", "near(${1:[path, ]}val)" ],
    [ "mongooseOptions()\tMongoose - Query", "mongooseOptions(${1:options})" ],
    [ "replaceOne()\tMongoose - Query", "replaceOne(${1:[criteria, doc, options, callback.err.writeOpResult]})" ],
    [ "limit()\tMongoose - Query", "limit(${1:number})" ],
    [ "maxScan()\tMongoose - Query", "maxScan(${1:number})" ],
    [ "polygon()\tMongoose - Query", "polygon(${1:[path, coordinatePairs...]})" ],
    [ "maxDistance()\tMongoose - Query", "maxDistance(${1:[path, ]}val)" ],
    [ "intersects()\tMongoose - Query", "intersects(${1:[arg]})" ],
    [ "find()\tMongoose - Query", "find(${1:[filter, callback.err.docs]})" ],
    [ "update()\tMongoose - Query", "update(${1:[criteria, doc, options, multipleCastError, callback.err.writeOpResult]})" ],
    [ "findOne()\tMongoose - Query", "findOne(${1:[filter, projection, options, callback.err.docs]})" ],
    [ "findOneAndRemove()\tMongoose - Query", "findOneAndRemove(${1:[conditions, options, rawResult, strict, callback.err.doc]})" ],
    [ "findOneAndUpdate()\tMongoose - Query", "findOneAndUpdate(${1:[query, doc, options, rawResult, strict, multipleCastError, lean, callback.err.doc]})" ],
    [ "exists()\tMongoose - Query", "exists(${1:[path, ]}val)" ],
    [ "batchSize()\tMongoose - Query", "batchSize(${1:val})" ],
    [ "box()\tMongoose - Query", "box(${1:val}, Upper)" ],
    [ "cast()\tMongoose - Query", "cast(model${1:[, obj]})" ],
    [ "catch()\tMongoose - Query", "catch(${1:reject})" ],
    [ "center()\tMongoose - Query", "center()" ],
    [ "remove()\tMongoose - Query", "remove(${1:[filter, callback.err.writeOpResult]})" ],
    [ "updateMany()\tMongoose - Query", "updateMany(${1:[criteria, doc, options, callback.err.writeOpResult]})" ],
    [ "updateOne()\tMongoose - Query", "updateOne(${1:[criteria, doc, options, callback.err.writeOpResult]})" ],
    [ "centerSphere()\tMongoose - Query", "centerSphere(${1:[path, ]}val)" ],
    [ "circle()\tMongoose - Query", "circle(${1:[path, ]}val)" ],
    [ "collation()\tMongoose - Query", "collation(${1:value})" ],
    [ "comment()\tMongoose - Query", "comment(${1:val})" ],
    [ "count()\tMongoose - Query", "count(${1:[criteria, callback.err.count]})" ],
    [ "deleteOne()\tMongoose - Query", "deleteOne(${1:[filter, callback.err.writeOpResult]})" ],
    [ "deleteMany()\tMongoose - Query", "deleteMany(${1:[filter, callback.err.writeOpResult]})" ],
    [ "distinct()\tMongoose - Query", "distinct(${1:[field, filter, callback.err.arr]})" ],
    [ "elemMatch()\tMongoose - Query", "elemMatch(${1:field, criteria})" ],
    [ "equals()\tMongoose - Query", "equals(${1:val})" ],
    [ "error()\tMongoose - Query", "error(${1:err})" ],
    [ "cursor()\tMongoose - Query", "cursor()" ],

    // Query - Cursor
    [ "QueryCursor()\tMongoose - QueryCursor", "QueryCursor(${1:query}, options)" ],
    [ "addCursorFlag()\tMongoose - QueryCursor", "addCursorFlag(${1:flog}, value)" ],
    [ "close()\tMongoose - QueryCursor", "close(${1:callback})" ],
    [ "eachAsync()\tMongoose - QueryCursor", "eachAsync(fn${1:[, options, parallel, callback]})" ],
    [ "map()\tMongoose - QueryCursor", "map(${1:fn.doc})" ],
    [ "next()\tMongoose - QueryCursor", "next(${1:callback.doc})" ],

    // Error
    [ "MongooseError()\tMongoose - Error", "MongooseError(${1:msg})" ],
    [ "messages\tMongoose - Error", "messages" ],
    [ "CastError\tMongoose - Error", "CastError" ],
    [ "VersionError\tMongoose - Error", "VersionError" ],
    [ "ValidatorError\tMongoose - Error", "ValidatorError" ],
    [ "ValidationError\tMongoose - Error", "ValidationError" ],
    [ "MissingSchemaError\tMongoose - Error", "MissingSchemaError" ],
    [ "DivergentArrayError\tMongoose - Error", "DivergentArrayError" ],
    [ "OverwriteModelError\tMongoose - Error", "OverwriteModelError" ],
    [ "DocumentNotFoundError\tMongoose - Error", "DocumentNotFoundError" ],

    // Error - ValidatorError
    [ "errors\tMongoose - ValidatorError", "errors" ],
    [ "kind\tMongoose - ValidatorError", "kind" ],
    [ "path\tMongoose - ValidatorError", "path" ],
    [ "value\tMongoose - ValidatorError", "value" ],
    [ "message\tMongoose - ValidatorError", "message" ],
    [ "reason\tMongoose - ValidatorError", "reason" ]

  ]
}