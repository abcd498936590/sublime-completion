{
  "scope": "source.js - string, source.coffee, source.js.embedded.html",

  "completions":
  [

    //Node全局（global）
    [ "__filename\tNodejs - Global", "__filename" ],
    [ "__dirname\tNodejs - Global", "__dirname" ],
    [ "process\tNodejs - Global", "process" ],
    [ "global\tNodejs - Global", "global" ],

    //Node模块部分
    [ "require()\tNodejs - Module", "require('${1:url}')" ],
    [ "require\tNodejs - Module", "require" ],
    [ "main\tNodejs - Module", "main" ],
    [ "cache\tNodejs - Module", "cache" ],
    [ "module\tNodejs - Module", "module" ],
    [ "exports\tNodejs - Module", "exports" ],
    [ "children\tNodejs - Module", "children" ],
    [ "id\tNodejs - Module", "id" ],
    [ "filename\tNodejs - Module", "filename" ],
    [ "loaded\tNodejs - Module", "loaded" ],
    [ "parent\tNodejs - Module", "parent" ],
    [ "paths\tNodejs - Module", "paths" ],
    [ "resolve()\tNodejs - Module", "resolve(${1:path})" ],

    //Node进程对象(process)
    [ "stdout\tNodejs - Process", "stdout" ],
    [ "stderr\tNodejs - Process", "stderr" ],
    [ "stdin\tNodejs - Process", "stdin" ],
    [ "argv\tNodejs - Process", "argv" ],
    [ "pid\tNodejs - Process", "pid" ],
    [ "title\tNodejs - Process", "title" ],
    [ "arch\tNodejs - Process", "arch" ],
    [ "platform\tNodejs - Process", "platform" ],
    [ "release\tNodejs - Process", "release" ],
    [ "version\tNodejs - Process", "version" ],
    [ "versions\tNodejs - Process", "versions" ],
    [ "connected\tNodejs - Process", "connected" ],
    [ "config\tNodejs - Process", "config" ],
    [ "execPath\tNodejs - Process", "execPath" ],
    [ "execArgv\tNodejs - Process", "execArgv" ],
    [ "mainModule\tNodejs - Process", "mainModule" ],
    [ "cpuUsage\tNodejs - Process", "cpuUsage(${1:[previousValue]})" ],
    [ "abort()\tNodejs - Process", "abort()" ],
    [ "emitWarning()\tNodejs - Process", "emitWarning(warning${1:[,name,ctor]})" ],
    [ "chdir()\tNodejs - Process", "chdir(${1:path})" ],
    [ "cwd()\tNodejs - Process", "cwd()" ],
    [ "uptime()\tNodejs - Process", "uptime()" ],
    [ "memoryUsage()\tNodejs - Process", "memoryUsage()" ],
    [ "hrtime()\tNodejs - Process", "hrtime(${1:[time]})" ],
    [ "exit()\tNodejs - Process", "exit(${1:[code]})" ],
    [ "exitCode\tNodejs - Process", "exitCode" ],
    [ "getgid()\tNodejs - Process", "getgid()" ],
    [ "setgid()\tNodejs - Process", "setgid(${1:id})" ],
    [ "setegid()\tNodejs - Process", "setegid(${1:id})" ],
    [ "seteuid()\tNodejs - Process", "seteuid(${1:id})" ],
    [ "getuid()\tNodejs - Process", "getuid()" ],
    [ "getegid()\tNodejs - Process", "getegid()" ],
    [ "geteuid()\tNodejs - Process", "geteuid()" ],
    [ "setuid()\tNodejs - Process", "setuid(${1:id})" ],
    [ "getgroups()\tNodejs - Process", "getgroups()" ],
    [ "setgroups()\tNodejs - Process", "setgroups(${1:groups})" ],
    [ "initgroups()\tNodejs - Process", "initgroups(${1:user},extra_group)" ],
    [ "kill()\tNodejs - Process", "kill(pid${1:[,signal]})" ],
    [ "nextTick()\tNodejs - Process", "nextTick(callback${1:[,agv]})" ],
    [ "umask()\tNodejs - Process", "umask(${1:[mask]})" ],
    //Node进程参数
    [ "cwd\tNodejs - Process", "cwd" ],
    [ "args\tNodejs - Process", "args" ],
    [ "exec\tNodejs - Process", "exec" ],
    [ "execPath\tNodejs - Process", "execPath" ],
    [ "execArgv\tNodejs - Process", "execArgv" ],
    [ "silent\tNodejs - Process", "silent" ],
    [ "env\tNodejs - Process", "env" ],
    [ "shell\tNodejs - Process", "shell" ],
    [ "timeout\tNodejs - Process", "timeout" ],
    [ "killSignal\tNodejs - Process", "killSignal" ],
    [ "maxBuffer\tNodejs - Process", "maxBuffer" ],
    [ "uid\tNodejs - Process", "uid" ],
    [ "gid\tNodejs - Process", "gid" ],
    [ "stdio\tNodejs - Process", "stdio" ],
    [ "argv0\tNodejs - Process", "argv0" ],
    [ "detached\tNodejs - Process", "detached" ],
    [ "input\tNodejs - Process", "input" ],

    //Node子进程（child_process）
    [ "child_process\tNodejs - child_process", "child_process" ],
    [ "connected\tNodejs - child_process", "connected" ],
    [ "disconnect()\tNodejs - child_process", "disconnect()" ],
    [ "kill()\tNodejs - child_process", "kill(${1:[signal]})" ],
    [ "spawn()\tNodejs - child_process", "spawn(command${1:[,args,options]})" ],
    [ "spawnSync()\tNodejs - child_process", "spawnSync(command${1:[,args,options]})" ],
    [ "fork()\tNodejs - child_process", "fork(modulePath${1:[,args,options]})" ],
    [ "exec()\tNodejs - child_process", "exec(command${1:[,options,callback.err.stdout.stderr]})" ],
    [ "execFile()\tNodejs - child_process", "execFile(file${1:[,args,options,callback.err.stdout.stderr]})" ],
    [ "execFileSync()\tNodejs - child_process", "execFileSync(file${1:[,args,options]})" ],
    [ "execSync()\tNodejs - child_process", "execSync(command${1:[,options]})" ],
    [ "send()\tNodejs - child_process", "send(message${1:[,sendHandle,options,callback]})" ],

    //Node多进程（cluster）
    [ "cluster\tNodejs - Cluster", "cluster" ],
    [ "exitedAfterDisconnect\tNodejs - Cluster", "exitedAfterDisconnect" ],
    [ "id\tNodejs - Cluster", "id" ],
    [ "workers\tNodejs - Cluster", "workers" ],
    [ "worker\tNodejs - Cluster", "worker" ],
    [ "settings\tNodejs - Cluster", "settings" ],
    [ "isWorker\tNodejs - Cluster", "isWorker" ],
    [ "isMaster\tNodejs - Cluster", "isMaster" ],
    [ "fork()\tNodejs - Cluster", "fork(${1:env})" ],
    [ "disconnect()\tNodejs - Cluster", "disconnect(${1:[callback]})" ],
    [ "schedulingPolicy\tNodejs - Cluster", "schedulingPolicy" ],
    [ "setupMaster()\tNodejs - Cluster", "setupMaster(${1:[settings]})" ],
    [ "suicide\tNodejs - Cluster", "suicide" ],
    [ "isConnected()\tNodejs - Cluster", "isConnected()" ],
    [ "isDead()\tNodejs - Cluster", "isDead()" ],
    [ "kill()\tNodejs - Cluster", "kill([signal='SIGTERM'])" ],
    [ "process\tNodejs - Cluster", "process" ],
    [ "send()\tNodejs - Cluster", "send(message${1:[,sendHandle,callback]})" ],

    //Node终端（tty）
    [ "isTTY\tNodejs - TTY", "isTTY" ],
    [ "isRaw\tNodejs - TTY", "isRaw" ],
    [ "rows\tNodejs - TTY", "rows" ],
    [ "columns\tNodejs - TTY", "columns" ],
    [ "setRawMode()\tNodejs - TTY", "setRawMode(${1:mode})" ],
    [ "isatty()\tNodejs - TTY", "isatty(${1:fd})" ],

    //Node流（stream）
    [ "stream\tNodejs - Stream", "stream" ],
    [ "buffer\tNodejs - Stream", "buffer" ],
    [ "getBuffer()\tNodejs - Stream", "getBuffer()" ],
    [ "Writable\tNodejs - Stream", "Writable" ],
    [ "PassThrough\tNodejs - Stream", "PassThrough" ],
    [ "highWaterMark\tNodejs - Stream", "highWaterMark" ],
    [ "_readableState\tNodejs - Stream", "_readableState" ],
    [ "_writableState\tNodejs - Stream", "_writableState" ],
    [ "flowing\tNodejs - Stream", "flowing" ],
    [ "objectMode\tNodejs - Stream", "objectMode" ],
    // [ "Readable\tNodejs - Stream", "Readable" ],
    // [ "Duplex\tNodejs - Stream", "Duplex" ],
    // [ "Transform\tNodejs - Stream", "Transform" ],
    [ "_transform()\tNodejs - Stream", "_transform(${1:chunk},encoding,callback)" ],
    [ "PassThrough\tNodejs - Stream", "PassThrough" ],
    [ "Writable()\tNodejs - Stream", "Writable(${1:[options]})" ],
    [ "Readable()\tNodejs - Stream", "Readable(${1:[options]})" ],
    [ "Duplex()\tNodejs - Stream", "Duplex(${1:[options]})" ],
    [ "Transform()\tNodejs - Stream", "Transform(${1:[options]})" ],
    [ "read()\tNodejs - Stream", "read(${1:[size]})" ],
    [ "_read()\tNodejs - Stream", "_read(${1:size})" ],
    [ "push()\tNodejs - Stream", "push(chunk${1:[,encoding]})" ],
    [ "setEncoding()\tNodejs - Stream", "setEncoding(${1:encoding})" ],
    [ "setDefaultEncoding()\tNodejs - Stream", "setDefaultEncoding(${1:encoding})" ],
    [ "resume()\tNodejs - Stream", "resume()" ],
    [ "pause()\tNodejs - Stream", "pause()" ],
    [ "pipe()\tNodejs - Stream", "pipe(destination${1:[,options]})" ],
    [ "unpipe()\tNodejs - Stream", "unpipe(${1:[destination]})" ],
    [ "unshift()\tNodejs - Stream", "unshift(${1:chunk})" ],
    [ "wrap()\tNodejs - Stream", "wrap(${1:stream})" ],
    [ "write()\tNodejs - Stream", "write(chunk${1:[,encoding,callback]})" ],
    [ "cork()\tNodejs - Stream", "cork()" ],
    [ "isPaused()\tNodejs - Stream", "isPaused()" ],
    [ "uncork()\tNodejs - Stream", "uncork()" ],
    [ "end()\tNodejs - Stream", "end(${1:[chunk,encoding,callback]})" ],
    [ "_write()\tNodejs - Stream", "_write(${1:chunk},encoding,callback)" ],
    [ "_transform()\tNodejs - Stream", "_transform(${1:chunk},encoding,callback)" ],
    [ "_writev()\tNodejs - Stream", "_writev(${1:chunks},callback)" ],
    [ "_flush()\tNodejs - Stream", "_flush(${1:callback})" ],
    //Node流参数
    [ "decodeStrings\tNodejs - Stream", "decodeStrings" ],
    [ "write\tNodejs - Stream", "write" ],
    [ "writev\tNodejs - Stream", "writev" ],
    [ "read\tNodejs - Stream", "read" ],

    //Node事件模块(events)
    [ "events\tNodejs - Events", "events" ],
    [ "EventEmitter\tNodejs - Events", "EventEmitter" ],
    [ "defaultMaxListeners\tNodejs - Events", "defaultMaxListeners" ],
    [ "exit()\tNodejs - Events", "exit()" ],
    [ "getMaxListeners()\tNodejs - Events", "getMaxListeners()" ],
    [ "eventNames()\tNodejs - Events", "eventNames()" ],
    [ "addListener()\tNodejs - Events", "addListener(${1:eventName},listener)" ],
    [ "on()\tNodejs - Events", "on(${1:eventName},listener)" ],
    [ "prependListener()\tNodejs - Events", "prependListener(${1:eventName},listener)" ],
    [ "prependOnceListener()\tNodejs - Events", "prependOnceListener(${1:eventName},listener)" ],
    [ "once()\tNodejs - Events", "once(${1:eventName},listener)" ],
    [ "removeListener()\tNodejs - Events", "removeListener(${1:eventName},listener)" ],
    [ "removeAllListeners()\tNodejs - Events", "removeAllListeners(${1:[eventName]})" ],
    [ "setMaxListeners()\tNodejs - Events", "setMaxListeners(${1:[n]})" ],
    [ "listeners()\tNodejs - Events", "listeners(${1:[eventName]})" ],
    [ "emit()\tNodejs - Events", "emit(eventName${1:[,arg]})" ],
    [ "newListener()\tNodejs - Events", "newListener(${1:eventName},listener)" ],

    //Node事件模块(events)，EventEmitter类方法
    [ "listenerCount()\tNodejs - Events", "listenerCount(${1:emitter},eventName)" ],

    //Node进程事件
    [ "exit\tNodejs - Event", "exit" ],
    [ "warning\tNodejs - Event", "warning" ],
    [ "beforeExit\tNodejs - Event", "beforeExit" ],
    [ "disconnect\tNodejs - Event", "disconnect" ],
    [ "uncaughtException\tNodejs - Event", "uncaughtException" ],
    [ "unhandledRejection\tNodejs - Event", "unhandledRejection" ],
    [ "rejectionHandled\tNodejs - Event", "rejectionHandled" ],
    [ "SIGINT\tNodejs - Event", "SIGINT" ],
    //Node上下文重置事件
    [ "reset\tNodejs - Event", "reset" ],
    //Node流事件
    [ "readable\tNodejs - Event", "readable" ],
    [ "data\tNodejs - Event", "data" ],
    [ "drain\tNodejs - Event", "drain" ],
    [ "end\tNodejs - Event", "end" ],
    [ "close\tNodejs - Event", "close" ],
    [ "error\tNodejs - Event", "error" ],
    [ "unpipe\tNodejs - Event", "unpipe" ],
    [ "pipe\tNodejs - Event", "pipe" ],
    [ "finish\tNodejs - Event", "finish" ],
    [ "unpipe\tNodejs - Event", "unpipe" ],
    //Node网络模块事件
    [ "connection\tNodejs - Event", "connection" ],
    [ "listening\tNodejs - Event", "listening" ],
    [ "connect\tNodejs - Event", "connect" ],
    [ "lookup\tNodejs - Event", "lookup" ],
    [ "timeout\tNodejs - Event", "timeout" ],
    //Node文件系統事件
    [ "change\tNodejs - Event", "change" ],
    [ "open\tNodejs - Event", "open" ],
    //Node网络事件（http）
    [ "abort\tNodejs - Event", "abort" ],
    [ "aborted\tNodejs - Event", "aborted" ],
    [ "connect\tNodejs - Event", "connect" ],
    [ "continue\tNodejs - Event", "continue" ],
    [ "response\tNodejs - Event", "response" ],
    [ "request\tNodejs - Event", "request" ],
    [ "socket\tNodejs - Event", "socket" ],
    [ "upgrade\tNodejs - Event", "upgrade" ],
    [ "checkContinue\tNodejs - Event", "checkContinue" ],
    [ "checkExpectation\tNodejs - Event", "checkExpectation" ],
    [ "clientError\tNodejs - Event", "clientError" ],
    //Node终端事件
    [ "resize\tNodejs - Event", "resize" ],
    //Node数据报事件
    [ "message\tNodejs - Event", "message" ],
    //Node加密通讯事件
    [ "tlsClientError\tNodejs - Event", "tlsClientError" ],
    [ "newSession\tNodejs - Event", "newSession" ],
    [ "OCSPRequest\tNodejs - Event", "OCSPRequest" ],
    [ "resumeSession\tNodejs - Event", "resumeSession" ],
    [ "secureConnection\tNodejs - Event", "secureConnection" ],
    [ "OCSPResponse\tNodejs - Event", "OCSPResponse" ],
    [ "secureConnect\tNodejs - Event", "secureConnect" ],
    [ "secure\tNodejs - Event", "secure" ],
    //Node集群事件
    [ "online\tNodejs - Event", "online" ],
    [ "fork\tNodejs - Event", "fork" ],
    [ "setup\tNodejs - Event", "setup" ],

    //Node调试标签
    [ "debugger\tNodejs - debug", "debugger" ],

    //Node二进制数据(Buffer)类方法class
    [ "isBuffer()\tNodejs - Buffer", "isBuffer(${1:obj})" ],
    [ "SlowBuffer()\tNodejs - Buffer", "SlowBuffer(${1:[size]})" ],
    [ "isEncoding()\tNodejs - Buffer", "isEncoding(${1:encoding})" ],
    [ "byteLength()\tNodejs - Buffer", "byteLength(string${1:[,encoding]})" ],
    [ "concat()\tNodejs - Buffer", "concat(bufferList${1:[,totalLength]})" ],
    [ "compare()\tNodejs - Buffer", "compare(${1:buf1},buf2)" ],
    [ "alloc()\tNodejs - Buffer", "alloc(size${1:[,fill,encoding]})" ],
    [ "allocUnsafe()\tNodejs - Buffer", "allocUnsafe(${1:size})" ],
    [ "allocUnsafeSlow()\tNodejs - Buffer", "allocUnsafeSlow(${1:size})" ],
    [ "from(array)\tNodejs - Buffer", "from(${1:array})" ],
    [ "from(arrayBuffer)\tNodejs - Buffer", "from(arrayBuffer${1:[,byteOffset,length]})" ],
    [ "from(Buffer)\tNodejs - Buffer", "from(${1:Buffer})" ],
    [ "from(String)\tNodejs - Buffer", "from(string${1:[,encoding]})" ],
    [ "poolSize\tNodejs - Buffer", "poolSize" ],
    //Node二进制数据(Buffer)方法
    [ "Buffer\tNodejs - Buffer", "Buffer" ],
    [ "kMaxLength\tNodejs - Buffer", "kMaxLength" ],
    [ "Buffer(size)\tNodejs - Buffer", "Buffer(${1:size})" ],
    [ "swap16()\tNodejs - Buffer", "swap16()" ],
    [ "swap32()\tNodejs - Buffer", "swap32()" ],
    [ "swap64()\tNodejs - Buffer", "swap64()" ],
    [ "compare()\tNodejs - Buffer", "compare(target${1:[,targetStart,targetEnd,sourceStart,sourceEnd]})" ],
    [ "Buffer(array)\tNodejs - Buffer", "Buffer(${1:array})" ],
    [ "Buffer(string)\tNodejs - Buffer", "Buffer(string${1:[,encoding]})" ],
    [ "toJSON()\tNodejs - Buffer", "toJSON()" ],
    [ "keys()\tNodejs - Buffer", "keys()" ],
    [ "values()\tNodejs - Buffer", "values()" ],
    [ "copy()\tNodejs - Buffer", "copy(targetBuffer${1:[,targetStart,sourceStart,sourceEnd]})" ],
    [ "slice()\tNodejs - Buffer", "slice(${1:[start,end]})" ],
    [ "equals()\tNodejs - Buffer", "equals(${1:buffer})" ],
    [ "fill()\tNodejs - Buffer", "fill(value,${1:[offset,end,encoding]})" ],
    [ "toString()\tNodejs - Buffer", "toString(${1:[encoding,start,end]})" ],
    [ "slice()\tNodejs - Buffer", "slice(${1:[start,end]})" ],
    [ "write()\tNodejs - Buffer", "write(string${1:[,offset,length,encoding]})" ],
    [ "indexOf()\tNodejs - Buffer", "indexOf(value${1:[,byteOffset,encoding]})" ],
    [ "lastIndexOf()\tNodejs - Buffer", "lastIndexOf(value${1:[,byteOffset,encoding]})" ],
    [ "includes()\tNodejs - Buffer", "includes(value${1:[,byteOffset,encoding]})" ],
    [ "writeUInt8()\tNodejs - Buffer", "writeUInt8(value,offset,${1:[noAssert]})" ],
    [ "writeUInt16LE()\tNodejs - Buffer", "writeUInt16LE(value,offset${1:[,noAssert]})" ],
    [ "writeUInt16BE()\tNodejs - Buffer", "writeUInt16BE(value,offset${1:[,noAssert]})" ],
    [ "writeUInt32LE()\tNodejs - Buffer", "writeUInt32LE(value,offset${1:[,noAssert]})" ],
    [ "writeUInt32BE()\tNodejs - Buffer", "writeUInt32BE(value,offset${1:[,noAssert]})" ],
    [ "writeUIntBE()\tNodejs - Buffer", "writeUIntBE(value,offset${1:[,noAssert]})" ],
    [ "writeUIntLE()\tNodejs - Buffer", "writeUIntLE(value,offset${1:[,noAssert]})" ],
    [ "writeInt8()\tNodejs - Buffer", "writeInt8(value,offset${1:[,noAssert]})" ],
    [ "writeInt16LE()\tNodejs - Buffer", "writeInt16LE(value,offset${1:[,noAssert]})" ],
    [ "writeInt16BE()\tNodejs - Buffer", "writeInt16BE(value,offset${1:[,noAssert]})" ],
    [ "writeInt32LE()\tNodejs - Buffer", "writeInt32LE(value,offset${1:[,noAssert]})" ],
    [ "writeInt32BE()\tNodejs - Buffer", "writeInt32BE(value,offset${1:[,noAssert]})" ],
    [ "writeFloatLE()\tNodejs - Buffer", "writeFloatLE(value,offset${1:[,noAssert]})" ],
    [ "writeFloatBE()\tNodejs - Buffer", "writeFloatBE(value,offset${1:[,noAssert]})" ],
    [ "writeDoubleLE()\tNodejs - Buffer", "writeDoubleLE(value,offset${1:[,noAssert]})" ],
    [ "writeDoubleBE()\tNodejs - Buffer", "writeDoubleBE(value,offset${1:[,noAssert]})" ],
    [ "writeIntBE()\tNodejs - Buffer", "writeIntBE(value,offset,byteLength${1:[,noAssert]})" ],
    [ "writeIntLE()\tNodejs - Buffer", "writeIntLE(value,offset,byteLength${1:[,noAssert]})" ],
    [ "readUInt8()\tNodejs - Buffer", "readUInt8(offset,${1:[noAssert]})" ],
    [ "readUInt16LE()\tNodejs - Buffer", "readUInt16LE(offset,${1:[noAssert]})" ],
    [ "readUInt16BE()\tNodejs - Buffer", "readUInt16BE(offset,${1:[noAssert]})" ],
    [ "readUInt32LE()\tNodejs - Buffer", "readUInt32LE(offset,${1:[noAssert]})" ],
    [ "readUInt32BE()\tNodejs - Buffer", "readUInt32BE(offset,${1:[noAssert]})" ],
    [ "readInt8()\tNodejs - Buffer", "readInt8(offset,${1:[noAssert]})" ],
    [ "readUInt8()\tNodejs - Buffer", "readUInt8(offset,${1:[noAssert]})" ],
    [ "readIntBE()\tNodejs - Buffer", "readIntBE(offset,byteLength,${1:[noAssert]})" ],
    [ "readUIntBE()\tNodejs - Buffer", "readUIntBE(offset,byteLength,${1:[noAssert]})" ],
    [ "readUIntLE()\tNodejs - Buffer", "readUIntLE(offset,byteLength,${1:[noAssert]})" ],
    [ "readIntLE()\tNodejs - Buffer", "readIntLE(offset,byteLength,${1:[noAssert]})" ],
    [ "readInt16LE()\tNodejs - Buffer", "readInt16LE(offset,${1:[noAssert]})" ],
    [ "readInt16BE()\tNodejs - Buffer", "readInt16BE(offset,${1:[noAssert]})" ],
    [ "readInt32LE()\tNodejs - Buffer", "readInt32LE(offset,${1:[noAssert]})" ],
    [ "readInt32BE()\tNodejs - Buffer", "readInt32BE(offset,${1:[noAssert]})" ],
    [ "readFloatLE()\tNodejs - Buffer", "readFloatLE(offset,${1:[noAssert]})" ],
    [ "readFloatBE()\tNodejs - Buffer", "readFloatBE(offset,${1:[noAssert]})" ],
    [ "readDoubleLE()\tNodejs - Buffer", "readDoubleLE(offset,${1:[noAssert]})" ],
    [ "readDoubleBE()\tNodejs - Buffer", "readDoubleBE(offset,${1:[noAssert]})" ],

    //Node文件系统(File System)
    [ "fs\tNodejs - File System", "fs" ],
    [ "ReadStream\tNodejs - File System", "ReadStream" ],
    [ "WriteStream\tNodejs - File System", "WriteStream" ],
    [ "bytesRead\tNodejs - File System", "bytesRead" ],
    [ "bytesWritten\tNodejs - File System", "bytesWritten" ],
    [ "path\tNodejs - File System", "path" ],
    [ "constants\tNodejs - File System", "constants" ],
    [ "mkdtemp()\tNodejs - File System", "mkdtemp(prefix${1:[,options]},callback)" ],
    [ "mkdtempSync()\tNodejs - File System", "mkdtempSync(prefix${1:[,options]})" ],
    [ "rename()\tNodejs - File System", "rename(${1:oldPath},newPath,callback.err})" ],
    [ "renameSync()\tNodejs - File System", "renameSync(${1:oldPath},newPath)" ],
    [ "truncate()\tNodejs - File System", "truncate(${1:path},length,callback.err})" ],
    [ "ftruncate()\tNodejs - File System", "ftruncate(${1:fd},length,callback.err})" ],
    [ "truncateSync()\tNodejs - File System", "truncateSync(${1:path},length)" ],
    [ "ftruncateSync()\tNodejs - File System", "ftruncateSync(${1:path},length)" ],
    [ "open()\tNodejs - File System", "open(path,flags${1:[,mode]},callback.err.fd)" ],
    [ "openSync()\tNodejs - File System", "openSync(path,flags${1:[,mode]})" ],
    [ "read()\tNodejs - File System", "read(${1:fd},buffer,offset,length,postion,callback.err.bfLen.bf)" ],
    [ "readSync()\tNodejs - File System", "readSync(${1:fd},buffer,offset,length,postion)" ],
    [ "write(buffer)\tNodejs - File System", "write(fd,buffer${1:[,options]},callback.err)" ],
    [ "write(data)\tNodejs - File System", "write(fd,data${1:[,postion,encoding]},callback.err.written.string)" ],
    [ "writeSync(data)\tNodejs - File System", "writeSync(fd,data${1:[,postion,encoding]})" ],
    [ "writeSync(buffer)\tNodejs - File System", "writeSync(fd,buffer,offset,length${1:[,postion]})" ],
    [ "close()\tNodejs - File System", "close(${1:fd},callback.err)" ],
    [ "closeSync()\tNodejs - File System", "closeSync(${1:fd})" ],
    [ "writeFile()\tNodejs - File System", "writeFile(fileName,data${1:[,options]},callback.err)" ],
    [ "writeFileSync()\tNodejs - File System", "writeFileSync(file,data${1:[,options]})" ],
    [ "appendFile()\tNodejs - File System", "appendFile(fileName,data${1:[,options]},callback.err)" ],
    [ "appendFileSync()\tNodejs - File System", "appendFileSync(fileName,data${1:[,options]})" ],
    [ "exists()\tNodejs - File System", "exists(${1:path},callback.err)" ],
    [ "existsSync()\tNodejs - File System", "existsSync(${1:path})" ],
    [ "readFile()\tNodejs - File System", "readFile(path${1:[,options]},callback.err.chunk)" ],
    [ "readFileSync()\tNodejs - File System", "readFileSync(path${1:[,options]}])" ],
    [ "unlink()\tNodejs - File System", "unlink(${1:path},callback.err)" ],
    [ "unlinkSync()\tNodejs - File System", "unlinkSync(${1:path})" ],
    [ "stat()\tNodejs - File System", "stat(${1:path},callback.err.stats)" ],
    [ "lstat()\tNodejs - File System", "lstat(${1:path},callback.err.stats)" ],
    [ "fstat()\tNodejs - File System", "fstat(${1:fd},callback.err.stats)" ],
    [ "statSync()\tNodejs - File System", "statSync(${1:path})" ],
    [ "fstatSync()\tNodejs - File System", "fstatSync(${1:fd})" ],
    [ "lstatSync()\tNodejs - File System", "lstatSync(${1:path})" ],
    [ "watchFile()\tNodejs - File System", "watchFile(filename${1:[,options]},callback.curState.prevState)" ],
    [ "unwatchFile()\tNodejs - File System", "unwatchFile(fileName${1:[,callback.curState.prevState]})" ],
    [ "watch()\tNodejs - File System", "watch(filename${1:[,options,callback.eventType.fileName]})" ],
    [ "mkdir()\tNodejs - File System", "mkdir(path,${1:[mode]},callback.err)" ],
    [ "mkdirSync()\tNodejs - File System", "mkdirSync(path,${1:[mode]})" ],
    [ "readdir()\tNodejs - File System", "readdir(path${1:[,options]},callback.err.files)" ],
    [ "readdirSync()\tNodejs - File System", "readdirSync(path{1:[,options]})" ],
    [ "rmdir()\tNodejs - File System", "rmdir(${1:path},callback.err)" ],
    [ "rmdirSync()\tNodejs - File System", "rmdirSync(${1:path})" ],
    [ "chown()\tNodejs - File System", "chown(${1:path},uid,gid,callback.err)" ],
    [ "fchown()\tNodejs - File System", "fchown(${1:path},uid,gid,callback.err)" ],
    [ "lchown()\tNodejs - File System", "lchown(${1:path},uid,gid,callback.err)" ],
    [ "chownSync()\tNodejs - File System", "chownSync(${1:path},uid,gid)" ],
    [ "fchownSync()\tNodejs - File System", "fchownSync(${1:path},uid,gid)" ],
    [ "fdatasync()\tNodejs - File System", "fdatasync(${1:fd},callback.err)" ],
    [ "fdatasyncSync()\tNodejs - File System", "fdatasyncSync(${1:fd})" ],
    [ "lchownSync()\tNodejs - File System", "lchownSync(${1:path},uid,gid)" ],
    [ "chmod()\tNodejs - File System", "chmod(${1:path},mode,callback.err)" ],
    [ "fchmod()\tNodejs - File System", "fchmod(${1:path},mode,callback.err)" ],
    [ "lchmod()\tNodejs - File System", "lchmod(${1:path},mode,callback.err)" ],
    [ "chmodSync()\tNodejs - File System", "chmodSync(${1:path},mode)" ],
    [ "fchmodSync()\tNodejs - File System", "fchmodSync(${1:path},mode)" ],
    [ "lchmodSync()\tNodejs - File System", "lchmodSync(${1:path},mode)" ],
    [ "link()\tNodejs - File System", "link(${1:srcpath},dstpath,callback.err)" ],
    [ "linkSync()\tNodejs - File System", "linkSync(${1:srcpath},dstpath)" ],
    [ "symlink()\tNodejs - File System", "symlink(target,path${1:[,type]},callback.err)" ],
    [ "symlinkSync()\tNodejs - File System", "symlinkSync(target,path${1:[,type]}])" ],
    [ "readlink()\tNodejs - File System", "readlink(path${1:[,options]},callback.err.linkString)" ],
    [ "readlinkSync()\tNodejs - File System", "readlinkSync(path${1:[,options]})" ],
    [ "realpath()\tNodejs - File System", "realpath(path${1:[,options]},callback.err.resolvedPath)" ],
    [ "realpathSync()\tNodejs - File System", "realpathSync(path${1:[,options]})" ],
    [ "utimes()\tNodejs - File System", "utimes(${1:path},atime,mtime,callback.err)" ],
    [ "futimes()\tNodejs - File System", "futimes(${1:fd},atime,mtime,callback.err)" ],
    [ "utimesSync()\tNodejs - File System", "utimesSync(${1:path},atime,mtime)" ],
    [ "futimesSync()\tNodejs - File System", "futimesSync(${1:fd},atime,mtime)" ],
    [ "fsync()\tNodejs - File System", "fsync(${1:fd},callback.err)" ],
    [ "fsyncSync()\tNodejs - File System", "fsyncSync(${1:fd})" ],
    [ "access()\tNodejs - File System", "access(path${1:[,mode]},callback.err)" ],
    [ "accessSync()\tNodejs - File System", "accessSync(path${1:[,mode]})" ],
    [ "createReadStream()\tNodejs - File System", "createReadStream(path${1:[,options]})" ],
    [ "createWriteStream()\tNodejs - File System", "createWriteStream(path${1:[,options]})" ],
    //Node文件信息
    [ "dev\tNodejs - File Stats", "dev" ],
    [ "mode\tNodejs - File Stats", "mode" ],
    [ "nlink\tNodejs - File Stats", "nlink" ],
    [ "rdev\tNodejs - File Stats", "rdev" ],
    [ "blksize\tNodejs - File Stats", "blksize" ],
    [ "ino\tNodejs - File Stats", "ino" ],
    [ "size\tNodejs - File Stats", "size" ],
    [ "blocks\tNodejs - File Stats", "blocks" ],
    [ "atime\tNodejs - File Stats", "atime" ],
    [ "mtime\tNodejs - File Stats", "mtime" ],
    [ "ctime\tNodejs - File Stats", "ctime" ],
    [ "birthtime\tNodejs - File Stats", "birthtime" ],
    //Node文件判断
    [ "isFile()\tNodejs - File Stats", "isFile()" ],
    [ "isDirectory()\tNodejs - File Stats", "isDirectory()" ],
    [ "isBlockDevice()\tNodejs - File Stats", "isBlockDevice()" ],
    [ "isCharacterDevice()\tNodejs - File Stats", "isCharacterDevice()" ],
    [ "isSymbolicLink()\tNodejs - File Stats", "isSymbolicLink()" ],
    [ "isFIFO()\tNodejs - File Stats", "isFIFO()" ],
    [ "isSocket()\tNodejs - File Stats", "isSocket()" ],
    //Node文件参数
    [ "flags\tNodejs - File System", "flags" ],
    [ "fd\tNodejs - File System", "fd" ],
    [ "mode\tNodejs - File System", "mode" ],
    [ "autoClose\tNodejs - File System", "autoClose" ],
    [ "start\tNodejs - File System", "start" ],
    [ "end\tNodejs - File System", "end" ],
    [ "defaultEncoding\tNodejs - File System", "defaultEncoding" ],
    [ "recursive\tNodejs - File System", "recursive" ],
    [ "persistent\tNodejs - File System", "persistent" ],
    [ "interval\tNodejs - File System", "interval" ],

    //Node网络模块（net）
    [ "net\tNodejs - Net", "net" ],
    [ "socket\tNodejs - Net", "socket" ],
    [ "address()\tNodejs - Net", "address()" ],
    [ "createServer()\tNodejs - Net", "createServer(${1:[options,callback]})" ],
    [ "createConnection(options)\tNodejs - Net", "createConnection(options${1:[,callback]})" ],
    [ "createConnection(path)\tNodejs - Net", "createConnection(path${1:[,callback]})" ],
    [ "createConnection(port)\tNodejs - Net", "createConnection(port${1:[,host,callback]})" ],
    [ "listen(handle)\tNodejs - Net", "listen(handle${1:[,backlog,callback]})" ],
    [ "listen(path)\tNodejs - Net", "listen(path${1:[,backlog,callback]})" ],
    [ "listen(options)\tNodejs - Net", "listen(options${1:[,callback]})" ],
    [ "listen()\tNodejs - Net", "listen(port${1:[,hostname,backlog,callback]})" ],
    [ "close()\tNodejs - Net", "close(${1:[callback]})" ],
    [ "connections\tNodejs - Net", "connections" ],
    [ "listening\tNodejs - Net", "listening" ],
    [ "maxConnections\tNodejs - Net", "maxConnections" ],
    [ "remoteAddress\tNodejs - Net", "remoteAddress" ],
    [ "remoteFamily\tNodejs - Net", "remoteFamily" ],
    [ "remotePort\tNodejs - Net", "remotePort" ],
    [ "bytesRead\tNodejs - Net", "bytesRead" ],
    [ "bytesWritten\tNodejs - Net", "bytesWritten" ],
    [ "connecting\tNodejs - Net", "connecting" ],
    [ "destroyed\tNodejs - Net", "destroyed" ],
    [ "localAddress\tNodejs - Net", "localAddress" ],
    [ "localPort\tNodejs - Net", "localPort" ],
    [ "ref()\tNodejs - Net", "ref()" ],
    [ "isIP()\tNodejs - Net", "isIP(input)" ],
    [ "isIPv4()\tNodejs - Net", "isIPv4(input)" ],
    [ "isIPv6()\tNodejs - Net", "isIPv6(input)" ],
    [ "unref()\tNodejs - Net", "unref()" ],
    [ "resume()\tNodejs - Net", "resume()" ],
    [ "setEncoding()\tNodejs - Net", "setEncoding(${1:[encoding]})" ],
    [ "end()\tNodejs - Net", "end(${1:[data,encoding]})" ],
    [ "setKeepAlive()\tNodejs - Net", "setKeepAlive(${1:[enable,initialDelay]})" ],
    [ "connect(callback)\tNodejs - Net", "connect(options${1:[,callback]})" ],
    [ "connect(path)\tNodejs - Net", "connect(path${1:[,callback]})" ],
    [ "connect(port)\tNodejs - Net", "connect(options${1:[,host,callback]})" ],
    [ "Socket()\tNodejs - Net", "Socket(${1:[options]})" ],
    [ "destroy()\tNodejs - Net", "destroy(${1:[exception]})" ],
    [ "setNoDelay()\tNodejs - Net", "setNoDelay(${1:[noDelay]})" ],
    [ "setTimeout()\tNodejs - Net", "setTimeout(timeout${1:[,callback]})" ],
    [ "getConnections()\tNodejs - Net", "getConnections(${1:callback.err.count})" ],
    //Net模块options参数属性
    [ "allowHalfOpen\tNodejs - Net", "allowHalfOpen" ],
    [ "pauseOnConnect\tNodejs - Net", "pauseOnConnect" ],
    [ "port\tNodejs - Net", "port" ],
    [ "socketPath\tNodejs - Net", "socketPath" ],
    [ "localPort\tNodejs - Net", "localPort" ],
    [ "family\tNodejs - Net", "family" ],
    [ "backlog\tNodejs - Net", "backlog" ],
    [ "exclusive\tNodejs - Net", "exclusive" ],
    [ "host\tNodejs - Net", "host" ],
    [ "path\tNodejs - Net", "path" ],

    //Node服务器模块（http）
    [ "http\tNodejs - Http", "http" ],
    [ "https\tNodejs - Https", "https" ],
    [ "STATUS_CODES\tNodejs - Http", "STATUS_CODES" ],
    [ "METHODS\tNodejs - Http", "METHODS" ],
    [ "headersSent\tNodejs - Http", "headersSent" ],
    [ "sendDate\tNodejs - Http", "sendDate" ],
    [ "globalAgent\tNodejs - Http", "globalAgent" ],
    [ "createServer()\tNodejs - Http", "createServer(${1:[callback]})" ],
    [ "createClient()\tNodejs - Http", "createClient(${1:[port,host]})" ],
    [ "createClient()\tNodejs - Http", "createClient(${1:[port,host]})" ],
    [ "get()\tNodejs - Http", "get(url${1:[,callback.res]})" ],
    [ "abort()\tNodejs - Http", "abort()" ],
    [ "addTrailers()\tNodejs - Http", "addTrailers(${1:json})" ],
    [ "getHeader()\tNodejs - Http", "getHeader(${1:key})" ],
    [ "removeHeader()\tNodejs - Http", "removeHeader(${1:key})" ],
    [ "flushHeaders()\tNodejs - Http", "flushHeaders()" ],
    [ "setHeader()\tNodejs - Http", "setHeader(${1:key},value)" ],
    [ "writeContinue()\tNodejs - Http", "writeContinue()" ],
    [ "writeHead()\tNodejs - Http", "writeHead(statusCode${1:[,statusMessage,headers]})" ],
    [ "setSocketKeepAlive()\tNodejs - Http", "setSocketKeepAlive(${1:[enable,initialDelay]})" ],
    [ "aborted\tNodejs - Http", "aborted" ],
    [ "timeout\tNodejs - Http", "timeout" ],
    [ "maxHeadersCount\tNodejs - Http", "maxHeadersCount" ],
    //http.IncomingMessage对象属性
    [ "httpVersion\tNodejs - Http", "httpVersion" ],
    [ "headers\tNodejs - Http", "headers" ],
    [ "rawHeaders\tNodejs - Http", "rawHeaders" ],
    [ "rawTrailers\tNodejs - Http", "rawTrailers" ],
    [ "method\tNodejs - Http", "method" ],
    [ "url\tNodejs - Http", "url" ],
    [ "statusCode\tNodejs - Http", "statusCode" ],
    [ "statusMessage\tNodejs - Http", "statusMessage" ],
    [ "socket\tNodejs - Http", "socket" ],
    //http客户端socket管理Agent类
    [ "agent\tNodejs - Http", "agent" ],
    [ "Agent\tNodejs - Http", "Agent" ],
    [ "sockets\tNodejs - Http", "sockets" ],
    [ "freeSockets\tNodejs - Http", "freeSockets" ],
    [ "requests\tNodejs - Http", "requests" ],
    [ "getName()\tNodejs - Http", "getName(${1:options})" ],
    //http客户端options参数
    [ "keepAlive\tNodejs - Http", "keepAlive" ],
    [ "keepAliveMsecs\tNodejs - Http", "keepAliveMsecs" ],
    [ "maxSockets\tNodejs - Http", "maxSockets" ],
    [ "maxFreeSockets\tNodejs - Http", "maxFreeSockets" ],
    [ "pfx\tNodejs - Http", "pfx" ],
    [ "key\tNodejs - Http", "key" ],
    [ "cert\tNodejs - Http", "cert" ],
    [ "ca\tNodejs - Http", "ca" ],
    [ "ciphers\tNodejs - Http", "ciphers" ],
    [ "rejectUnauthorized\tNodejs - Http", "rejectUnauthorized" ],
    [ "secureProtocol\tNodejs - Http", "secureProtocol" ],
    [ "servername\tNodejs - Http", "servername" ],
    [ "minDHSize\tNodejs - Http", "minDHSize" ],
    [ "checkServerIdentity()\tNodejs - Http", "checkServerIdentity.servername.cert" ],

    //Node数据报模块（udp）
    [ "dgram\tNodejs - Dgram", "dgram" ],
    [ "address()\tNodejs - Dgram", "address()" ],
    [ "setMulticastLoopback()\tNodejs - Dgram", "setMulticastLoopback(${1:flag})" ],
    [ "setMulticastTTL()\tNodejs - Dgram", "setMulticastTTL(${1:ttl})" ],
    [ "setTTL()\tNodejs - Dgram", "setTTL(${1:ttl})" ],
    [ "setBroadcast()\tNodejs - Dgram", "setBroadcast(${1:flag})" ],
    [ "send()\tNodejs - Dgram", "send(msg,${1:[offset,length,]}port,address${1:[,callback]})" ],
    [ "createSocket(options)\tNodejs - Dgram", "createSocket(options${1:[,callback]})" ],
    [ "createSocket(type)\tNodejs - Dgram", "createSocket(type${1:[,callback]})" ],
    [ "bind(port)\tNodejs - Dgram", "bind(${1:[port,address,callback]})" ],
    [ "bind(options)\tNodejs - Dgram", "bind(options${1:[,callback]})" ],
    [ "addMembership()\tNodejs - Dgram", "addMembership(multicastAddress${1:[,multicastInterface]})" ],
    [ "dropMembership()\tNodejs - Dgram", "dropMembership(multicastAddress${1:[,multicastInterface]})" ],

    //Node操作系统模块（OS）
    [ "os\tNodejs - OS", "os" ],
    [ "EOL\tNodejs - OS", "EOL" ],
    [ "constants\tNodejs - OS", "constants" ],
    [ "signals\tNodejs - OS", "signals" ],
    [ "errno\tNodejs - OS", "errno" ],
    [ "arch()\tNodejs - OS", "arch()" ],
    [ "cpus()\tNodejs - OS", "cpus()" ],
    [ "endianness()\tNodejs - OS", "endianness()" ],
    [ "freemem()\tNodejs - OS", "freemem()" ],
    [ "homedir()\tNodejs - OS", "homedir()" ],
    [ "hostname()\tNodejs - OS", "hostname()" ],
    [ "loadavg()\tNodejs - OS", "loadavg()" ],
    [ "tmpdir()\tNodejs - OS", "tmpdir()" ],
    [ "platform()\tNodejs - OS", "platform()" ],
    [ "totalmem()\tNodejs - OS", "totalmem()" ],
    [ "type()\tNodejs - OS", "type()" ],
    [ "uptime()\tNodejs - OS", "uptime()" ],
    [ "userInfo()\tNodejs - OS", "userInfo(${1:[options]})" ],
    [ "release()\tNodejs - OS", "release()" ],
    [ "networkInterfaces()\tNodejs - OS", "networkInterfaces()" ],

    //Node错误对象（Error）
    [ "Error\tNodejs - Error", "Error" ],
    [ "Error()\tNodejs - Error", "Error(${1:message})" ],
    [ "captureStackTrace()\tNodejs - Error", "captureStackTrace(targetObject${1:[,constructorOpt]})" ],
    [ "stack\tNodejs - Error", "stack" ],
    [ "message\tNodejs - Error", "message" ],
    [ "code\tNodejs - Error", "code" ],
    [ "errno\tNodejs - Error", "errno" ],
    [ "syscall\tNodejs - Error", "syscall" ],
    [ "address\tNodejs - Error", "address" ],
    [ "port\tNodejs - Error", "port" ],
    [ "stackTraceLimit\tNodejs - Error", "stackTraceLimit" ],

    //Node压缩解压模块（zlib）
    [ "zlib\tNodejs - Zlib", "zlib" ],
    [ "Zlib\tNodejs - Zlib", "Zlib" ],
    [ "Gzip\tNodejs - Zlib", "Gzip" ],
    [ "Unzip\tNodejs - Zlib", "Unzip" ],
    [ "Gunzip\tNodejs - Zlib", "Gunzip" ],
    [ "Deflate\tNodejs - Zlib", "Deflate" ],
    [ "Inflate\tNodejs - Zlib", "Inflate" ],
    [ "DeflateRaw\tNodejs - Zlib", "DeflateRaw" ],
    [ "InflateRaw\tNodejs - Zlib", "InflateRaw" ],
    [ "flush()\tNodejs - Zlib", "flush(${1:[kind,]}callback)" ],
    [ "params()\tNodejs - Zlib", "params(${1:level},strategy,callback)" ],
    [ "createGzip()\tNodejs - Zlib", "createGzip(${1:[options]})" ],
    [ "createGunzip()\tNodejs - Zlib", "createGunzip(${1:[options]})" ],
    [ "createDeflate()\tNodejs - Zlib", "createDeflate(${1:[options]})" ],
    [ "createInflate()\tNodejs - Zlib", "createInflate(${1:[options]})" ],
    [ "createDeflateRaw()\tNodejs - Zlib", "createDeflateRaw(${1:[options]})" ],
    [ "createInflateRaw()\tNodejs - Zlib", "createInflateRaw(${1:[options]})" ],
    [ "createUnzip()\tNodejs - Zlib", "createUnzip(${1:[options]})" ],
    [ "reset()\tNodejs - Zlib", "reset()" ],
    [ "deflate()\tNodejs - Zlib", "deflate(buffer${1:[,options]},callback)" ],
    [ "deflateRaw()\tNodejs - Zlib", "deflateRaw(buffer${1:[,options]},callback)" ],
    [ "gzip()\tNodejs - Zlib", "gzip(buffer${1:[,options]},callback)" ],
    [ "gunzip()\tNodejs - Zlib", "gunzip(buffer${1:[,options]},callback)" ],
    [ "inflate()\tNodejs - Zlib", "inflate(buffer${1:[,options]},callback)" ],
    [ "inflateRaw()\tNodejs - Zlib", "inflateRaw(buffer${1:[,options]},callback)" ],
    [ "unzip()\tNodejs - Zlib", "unzip(buffer${1:[,options]},callback)" ],
    [ "deflateSync()\tNodejs - Zlib", "deflateSync(buffer${1:[,options]})" ],
    [ "deflateRawSync()\tNodejs - Zlib", "deflateRawSync(buffer${1:[,options]})" ],
    [ "gzipSync()\tNodejs - Zlib", "gzipSync(buffer${1:[,options]})" ],
    [ "gunzipSync()\tNodejs - Zlib", "gunzipSync(buffer${1:[,options]})" ],
    [ "inflateSync()\tNodejs - Zlib", "inflateSync(buffer${1:[,options]})" ],
    [ "inflateRawSync()\tNodejs - Zlib", "inflateRawSync(buffer${1:[,options]})" ],
    [ "unzipSync()\tNodejs - Zlib", "unzipSync(buffer${1:[,options]})" ],
    //zlib参数
    [ "flush\tNodejs - Zlib", "flush" ],
    [ "chunkSize\tNodejs - Zlib", "chunkSize" ],
    [ "finishFlush\tNodejs - Zlib", "finishFlush" ],
    [ "chunkSize\tNodejs - Zlib", "chunkSize" ],
    [ "windowBits\tNodejs - Zlib", "windowBits" ],
    [ "level\tNodejs - Zlib", "level" ],
    [ "memLevel\tNodejs - Zlib", "memLevel" ],
    [ "strategy\tNodejs - Zlib", "strategy" ],
    [ "dictionary\tNodejs - Zlib", "dictionary" ],

    //Node路径模块（path）
    [ "path\tNodejs - Path", "path" ],
    [ "posix\tNodejs - Path", "posix" ],
    [ "win32\tNodejs - Path", "win32" ],
    [ "sep\tNodejs - Path", "sep" ],
    [ "delimiter\tNodejs - Path", "delimiter" ],
    [ "dirname()\tNodejs - Path", "dirname(${1:path})" ],
    [ "relative()\tNodejs - Path", "relative(${1:form},to)" ],
    [ "extname()\tNodejs - Path", "extname(${1:path})" ],
    [ "format()\tNodejs - Path", "format(${1:pathObject})" ],
    [ "isAbsolute()\tNodejs - Path", "isAbsolute(${1:path})" ],
    [ "join()\tNodejs - Path", "join(${1:[paths]})" ],
    [ "resolve()\tNodejs - Path", "resolve(${1:[paths]})" ],
    [ "normalize()\tNodejs - Path", "normalize(${1:path})" ],
    [ "parse()\tNodejs - Path", "parse(${1:path})" ],
    [ "basename()\tNodejs - Path", "basename(${1:path},suffix)" ],
    //Node路径模块参数
    [ "dir\tNodejs - Path", "dir" ],
    [ "root\tNodejs - Path", "root" ],
    [ "base\tNodejs - Path", "base" ],
    [ "ext\tNodejs - Path", "ext" ],

    //Node字符串解码器（string_decoder）
    [ "string_decoder\tNodejs - StringDecoder", "string_decoder" ],
    [ "StringDecoder\tNodejs - StringDecoder", "StringDecoder" ],
    [ "StringDecoder()\tNodejs - StringDecoder", "StringDecoder(${1:[encoding]})" ],
    [ "end()\tNodejs - StringDecoder", "end(${1:[buffer]})" ],
    [ "write()\tNodejs - StringDecoder", "write(${1:buffer})" ],
    [ "encoding\tNodejs - StringDecoder", "encoding" ],

    //Node字符串查询模块（querystring）
    [ "querystring\tNodejs - Querystring", "querystring" ],
    [ "escape()\tNodejs - Querystring", "escape(${1:string})" ],
    [ "unescape()\tNodejs - Querystring", "unescape(${1:string})" ],
    [ "parse()\tNodejs - Querystring", "parse(string${1:[,sep,eq,options]})" ],
    [ "stringify()\tNodejs - Querystring", "stringify(string${1:[,sep,eq,options]})" ],
    //Node字符串解码参数
    [ "maxKeys\tNodejs - Querystring", "maxKeys" ],
    [ "decodeURIComponent\tNodejs - Querystring", "decodeURIComponent" ],

    //Node工具模块（util）
    [ "util\tNodejs - Util", "util" ],
    [ "inspect\tNodejs - Util", "inspect" ],
    [ "defaultOptions\tNodejs - Util", "defaultOptions" ],
    [ "custom\tNodejs - Util", "custom" ],
    [ "debuglog()\tNodejs - Util", "debuglog(${1:section})" ],
    [ "format()\tNodejs - Util", "format(${1:[options]})" ],
    [ "inspect()\tNodejs - Util", "inspect(object${1:[,options]})" ],
    [ "inherits()\tNodejs - Util", "inherits(${1:constructor},superConstructor)" ],
    [ "deprecate()\tNodejs - Util", "deprecate(${1:callback},string)" ],
    //Node工具模块参数
    [ "showHidden\tNodejs - Util", "showHidden" ],
    [ "depth\tNodejs - Util", "depth" ],
    [ "customInspect\tNodejs - Util", "customInspect" ],
    [ "showProxy\tNodejs - Util", "showProxy" ],
    [ "maxArrayLength\tNodejs - Util", "maxArrayLength" ],
    [ "breakLength\tNodejs - Util", "breakLength" ],

    //输出(console系列)
    [ "console\tNodejs - Console", "console" ],
    [ "Console()\tNodejs - Console", "Console(stdout${1:[,stderr]})" ],
    [ "log()\tNodejs - Console", "log(${1:[data,...args]})" ],
    [ "dir()\tNodejs - Console", "dir(obj${1:[,options]})" ],
    [ "time()\tNodejs - Console", "time(${1:label})" ],
    [ "profile()\tNodejs - Console", "profile()" ],
    [ "timeEnd()\tNodejs - Console", "timeEnd(${1:label})" ],
    [ "profileEnd()\tNodejs - Console", "profileEnd()" ],
    [ "dirxml()\tNodejs - Console", "dirxml(${1:data})" ],
    [ "assert()\tNodejs - Console", "assert(value,${1:[message,...args]})" ],
    [ "trace()\tNodejs - Console", "trace(message${1:[,...args]})" ],
    [ "info()\tNodejs - Console", "info(${1:[data,...args]})" ],
    [ "error()\tNodejs - Console", "error(${1:[data,...args]})" ],
    [ "warn()\tNodejs - Console", "warn(${1:[data,...args]})" ],
    //Node输出参数
    [ "showHidden\tNodejs - Console", "showHidden" ],
    [ "depth\tNodejs - Console", "depth" ],
    [ "colors\tNodejs - Console", "colors" ],

    //Node加密系列（Crypto）
    [ "crypto\tNodejs - Crypto", "crypto" ],
    [ "verifyError\tNodejs - Crypto", "verifyError" ],
    [ "fips\tNodejs - Crypto", "fips" ],
    [ "DEFAULT_ENCODING\tNodejs - Crypto", "DEFAULT_ENCODING" ],
    [ "Certificate()\tNodejs - Crypto", "Certificate()" ],
    [ "getCiphers()\tNodejs - Crypto", "getCiphers()" ],
    [ "getSpkacSomehow()\tNodejs - Crypto", "getSpkacSomehow()" ],
    [ "timingSafeEqual()\tNodejs - Crypto", "timingSafeEqual(${1:a},b)" ],
    [ "getCurves()\tNodejs - Crypto", "getCurves()" ],
    [ "randomBytes()\tNodejs - Crypto", "randomBytes(size${1:[,callback]})" ],
    [ "pseudoRandomBytes()\tNodejs - Crypto", "pseudoRandomBytes(size${1:[,callback]})" ],
    [ "pbkdf2()\tNodejs - Crypto", "pbkdf2(${1:password},salt,iterations,keylen,digest,callback)" ],
    [ "pbkdf2Sync()\tNodejs - Crypto", "pbkdf2Sync(${1:password},salt,iterations,keylen,digest)" ],
    [ "getDiffieHellman()\tNodejs - Crypto", "getDiffieHellman(${1:group_name})" ],
    [ "createECDH()\tNodejs - Crypto", "createECDH(${1:curve_name})" ],
    [ "verifySpkac()\tNodejs - Crypto", "verifySpkac(${1:spkac})" ],
    [ "exportChallenge()\tNodejs - Crypto", "exportChallenge(${1:spkac})" ],
    [ "exportPublicKey()\tNodejs - Crypto", "exportPublicKey(${1:spkac})" ],
    [ "publicEncrypt()\tNodejs - Crypto", "publicEncrypt(${1:public_key},buffer)" ],
    [ "privateEncrypt()\tNodejs - Crypto", "privateEncrypt(${1:private_key},buffer)" ],
    [ "privateDecrypt()\tNodejs - Crypto", "privateDecrypt(${1:private_key},buffer)" ],
    [ "generateKeys(DiffieHellman)\tNodejs - Crypto", "generateKeys(${1:[encoding]})" ],
    [ "generateKeys(ECDH)\tNodejs - Crypto", "generateKeys(${1:[encoding,format]})" ],
    [ "getPrime()\tNodejs - Crypto", "getPrime(${1:[encoding]})" ],
    [ "getGenerator()\tNodejs - Crypto", "getGenerator(${1:[encoding]})" ],
    [ "getPublicKey(DiffieHellman)\tNodejs - Crypto", "getPublicKey(${1:[encoding]})" ],
    [ "getPublicKey(ECDH)\tNodejs - Crypto", "getPublicKey(${1:[encoding,format]})" ],
    [ "getPrivateKey()\tNodejs - Crypto", "getPrivateKey(${1:[encoding]})" ],
    [ "setPublicKey()\tNodejs - Crypto", "setPublicKey(public_key${1:[,encoding]})" ],
    [ "setPrivateKey()\tNodejs - Crypto", "setPrivateKey(private_key${1:[,encoding]})" ],
    [ "computeSecret()\tNodejs - Crypto", "computeSecret(other_public_key${1:[,input_encoding,output_encoding]})" ],
    [ "getHashes()\tNodejs - Crypto", "getHashes()" ],
    [ "createDiffieHellman(length)\tNodejs - Crypto", "createDiffieHellman(prime_length${1:[,generator]})" ],
    [ "createDiffieHellman()\tNodejs - Crypto", "createDiffieHellman(prime${1:[,prime_encoding,generator,generator_encoding]})" ],
    [ "createSign()\tNodejs - Crypto", "createSign(${1:algorithm})" ],
    [ "createCredentials()\tNodejs - Crypto", "createCredentials(${1:details})" ],
    [ "createHash()\tNodejs - Crypto", "createHash(${1:algorithm})" ],
    [ "setEngine()\tNodejs - Crypto", "setEngine(engine${1:[,flags]})" ],
    [ "createHmac()\tNodejs - Crypto", "createHmac(${1:algorithm},key)" ],
    [ "createCipher()\tNodejs - Crypto", "createCipher(${1:algorithm},password)" ],
    [ "createDecipher()\tNodejs - Crypto", "createDecipher(${1:algorithm},password)" ],
    [ "createCipheriv()\tNodejs - Crypto", "createCipheriv(${1:algorithm},key,iv)" ],
    [ "createDecipheriv()\tNodejs - Crypto", "createDecipheriv(${1:algorithm},key,iv)" ],
    [ "update(Hash)\tNodejs - Crypto", "update(data${1:[,input_encoding]})" ],
    [ "update(Hmac/Sign/Verify)\tNodejs - Crypto", "update(${1:data})" ],
    [ "update(Cipher/Decipher)\tNodejs - Crypto", "update(data${1:[,input_encoding,output_encoding]})" ],
    [ "digest()\tNodejs - Crypto", "digest(${1:[encoding]})" ],
    [ "final(Cipher/Decipher)\tNodejs - Crypto", "final(${1:[output_encoding]})" ],
    [ "setAutoPadding(Cipher/Decipher)\tNodejs - Crypto", "setAutoPadding(auto_padding=${1:true})" ],
    [ "getAuthTag()\tNodejs - Crypto", "getAuthTag(${1:buffer})" ],
    [ "setAAD()\tNodejs - Crypto", "setAAD(${1:buffer})" ],
    [ "sign()\tNodejs - Crypto", "sign(private_key${1:[,output_format]})" ],
    [ "createVerify()\tNodejs - Crypto", "createVerify(${1:algorithm})" ],
    [ "verify()\tNodejs - Crypto", "verify(object,signature${1:[,signature_format]})" ],
    //Node加密参数
    [ "pfx\tNodejs - Crypto", "pfx" ],
    [ "key\tNodejs - Crypto", "key" ],
    [ "passphrase\tNodejs - Crypto", "passphrase" ],
    [ "cert\tNodejs - Crypto", "cert" ],
    [ "ca\tNodejs - Crypto", "ca" ],
    [ "crl\tNodejs - Crypto", "crl" ],
    [ "ciphers\tNodejs - Crypto", "ciphers" ],
    [ "padding\tNodejs - Crypto", "padding" ],

    //Node定时器类
    [ "clearImmediate()\tNodejs - Timeout", "clearImmediate(${1:immediate})" ],
    [ "clearInterval()\tNodejs - Timeout", "clearInterval(${1:timeout})" ],
    [ "clearTimeout()\tNodejs - Timeout", "clearTimeout(${1:timeout})" ],
    [ "setImmediate()\tNodejs - Timeout", "setImmediate(callback${1:[,...args]})" ],
    [ "setInterval()\tNodejs - Timeout", "setInterval(callback,delay${1:[,...args]})" ],
    [ "setTimeout()\tNodejs - Timeout", "setTimeout(callback,delay${1:[,...args]})" ],

    //Node虚拟机（vm）
    [ "Script()\tNodejs - VM", "Script(${1:code},options)" ],
    [ "runInContext()\tNodejs - VM", "runInContext(contextifiedSandbox${1:[,options]})" ],
    [ "runInContext(code)\tNodejs - VM", "runInContext(code,contextifiedSandbox${1:[,options]})" ],
    [ "runInNewContext()\tNodejs - VM", "runInNewContext(${1:[sandbox,options]})" ],
    [ "runInNewContext(code)\tNodejs - VM", "runInNewContext(code${1:[,sandbox,options]})" ],
    [ "runInThisContext()\tNodejs - VM", "runInThisContext(${1:[options]})" ],
    [ "runInThisContext(code)\tNodejs - VM", "runInThisContext(code${1:[,options]})" ],
    [ "createContext()\tNodejs - VM", "createContext(${1:[sandbox]})" ],
    [ "isContext()\tNodejs - VM", "isContext(${1:sandbox})" ],
    [ "runInDebugContext()\tNodejs - VM", "runInDebugContext(${1:code})" ],
    //Node虚拟机参数
    [ "lineOffset\tNodejs - VM", "lineOffset" ],
    [ "columnOffset\tNodejs - VM", "columnOffset" ],
    [ "displayErrors\tNodejs - VM", "displayErrors" ],
    [ "timeout\tNodejs - VM", "timeout" ],
    [ "cachedData\tNodejs - VM", "cachedData" ],
    [ "produceCachedData\tNodejs - VM", "produceCachedData" ],
    [ "breakOnSigint\tNodejs - VM", "breakOnSigint" ],

    //Node标准编码（ASCII）
    [ "punycode\tNodejs - Punycode", "punycode" ],
    [ "ucs2\tNodejs - Punycode", "ucs2" ],
    [ "version\tNodejs - Punycode", "version" ],
    [ "decode()\tNodejs - Punycode", "decode(${1:string})" ],
    [ "encode()\tNodejs - Punycode", "encode(${1:string/codePoints})" ],
    [ "toASCII()\tNodejs - Punycode", "toASCII(${1:domain})" ],
    [ "toUnicode()\tNodejs - Punycode", "toUnicode(${1:domain})" ],

    //Node域名解析（dns）
    [ "dns\tNodejs - Dns", "dns" ],
    [ "getServers()\tNodejs - Dns", "getServers()" ],
    [ "lookup()\tNodejs - Dns", "lookup(hostname${1:[,options]},callback)" ],
    [ "lookupService()\tNodejs - Dns", "lookupService(${1:address},port,callback)" ],
    [ "resolve()\tNodejs - Dns", "resolve(hostname${1:[,rrtype]},callback)" ],
    [ "resolve4()\tNodejs - Dns", "resolve4(${1:hostname},callback)" ],
    [ "resolve6()\tNodejs - Dns", "resolve6(${1:hostname},callback)" ],
    [ "resolveCname()\tNodejs - Dns", "resolveCname(${1:hostname},callback)" ],
    [ "resolveMx()\tNodejs - Dns", "resolveMx(${1:hostname},callback)" ],
    [ "resolveNaptr()\tNodejs - Dns", "resolveNaptr(${1:hostname},callback)" ],
    [ "resolveNs()\tNodejs - Dns", "resolveNs(${1:hostname},callback)" ],
    [ "resolveSoa()\tNodejs - Dns", "resolveSoa(${1:hostname},callback)" ],
    [ "resolveSrv()\tNodejs - Dns", "resolveSrv(${1:hostname},callback)" ],
    [ "resolvePtr()\tNodejs - Dns", "resolvePtr(${1:hostname},callback)" ],
    [ "resolveTxt()\tNodejs - Dns", "resolveTxt(${1:hostname},callback)" ],
    [ "reverse()\tNodejs - Dns", "reverse(${1:ip},callback)" ],
    [ "setServers()\tNodejs - Dns", "setServers(${1:servers})" ],
    //DNS参数
    [ "hints\tNodejs - Dns", "hints" ],
    [ "all\tNodejs - Dns", "all" ],

    //Node安全传输层（tls/ssl）
    [ "tls\tNodejs - Tls", "tls" ],
    [ "authorized\tNodejs - Tls", "authorized" ],
    [ "localPort\tNodejs - Tls", "localPort" ],
    [ "DEFAULT_ECDH_CURVE\tNodejs - Tls", "DEFAULT_ECDH_CURVE" ],
    [ "remoteAddress\tNodejs - Tls", "remoteAddress" ],
    [ "remoteFamily\tNodejs - Tls", "remoteFamily" ],
    [ "remotePort\tNodejs - Tls", "remotePort" ],
    [ "localAddress\tNodejs - Tls", "localAddress" ],
    [ "authorizationError\tNodejs - Tls", "authorizationError" ],
    [ "encrypted\tNodejs - Tls", "encrypted" ],
    [ "addContext()\tNodejs - Tls", "addContext(${1:hostname},context)" ],
    [ "getTicketKeys()\tNodejs - Tls", "getTicketKeys()" ],
    [ "getCipher()\tNodejs - Tls", "getCipher()" ],
    [ "createSecureContext()\tNodejs - Tls", "createSecureContext(${1:options})" ],
    [ "renegotiate()\tNodejs - Tls", "renegotiate(${1:options},callback)" ],
    [ "getProtocol()\tNodejs - Tls", "getProtocol()" ],
    [ "getSession()\tNodejs - Tls", "getSession()" ],
    [ "getTLSTicket()\tNodejs - Tls", "getTLSTicket()" ],
    [ "createServer()\tNodejs - Tls", "createServer(${1:[options,secureConnectionListener]})" ],
    [ "getEphemeralKeyInfo()\tNodejs - Tls", "getEphemeralKeyInfo()" ],
    [ "getPeerCertificate()\tNodejs - Tls", "getPeerCertificate(${1:[detailed]})" ],
    [ "setTicketKeys()\tNodejs - Tls", "setTicketKeys(${1:keys})" ],
    [ "createSecurePair()\tNodejs - Tls", "createSecurePair(${1:[context,isServer,requestCert,rejectUnauthorized,options]})" ],
    [ "setMaxSendFragment()\tNodejs - Tls", "setMaxSendFragment(${1:size})" ],
    [ "TLSSocket()\tNodejs - Tls", "TLSSocket(socket${1:[,options]})" ],
    [ "connect(port)\tNodejs - Tls", "connect(port${1:[,host,options,callback]})" ],
    [ "connect(path)\tNodejs - Tls", "connect(path${1:[,options,callback]})" ],
    [ "connect(options)\tNodejs - Tls", "connect(options${1:[,callback]})" ],
    //Node安全传输参数
    [ "isServer\tNodejs - Tls", "isServer" ],
    [ "server\tNodejs - Tls", "server" ],
    [ "requestCert\tNodejs - Tls", "requestCert" ],
    [ "rejectUnauthorized\tNodejs - Tls", "rejectUnauthorized" ],
    [ "NPNProtocols\tNodejs - Tls", "NPNProtocols" ],
    [ "ALPNProtocols()\tNodejs - Tls", "ALPNProtocols.servername.callback" ],
    [ "SNICallback\tNodejs - Tls", "SNICallback" ],
    [ "session\tNodejs - Tls", "session" ],
    [ "requestOCSP\tNodejs - Tls", "requestOCSP" ],
    [ "secureContext\tNodejs - Tls", "secureContext" ],
    [ "options\tNodejs - Tls", "options" ],
    [ "honorCipherOrder\tNodejs - Tls", "honorCipherOrder" ],
    [ "ecdhCurve\tNodejs - Tls", "ecdhCurve" ],
    [ "dhparam\tNodejs - Tls", "dhparam" ],
    [ "secureOptions\tNodejs - Tls", "secureOptions" ],
    [ "sessionIdContext\tNodejs - Tls", "sessionIdContext" ],
    [ "sessionTimeout\tNodejs - Tls", "sessionTimeout" ],
    [ "handshakeTimeou\tNodejs - Tls", "handshakeTimeou" ],
    [ "ticketKeys\tNodejs - Tls", "ticketKeys" ],

    //Node（V8）
    [ "v8\tNodejs - V8", "v8" ],
    [ "getHeapStatistics()\tNodejs - V8", "getHeapStatistics()" ],
    [ "getHeapSpaceStatistics()\tNodejs - V8", "getHeapSpaceStatistics()" ],
    [ "setFlagsFromString()\tNodejs - V8", "setFlagsFromString(${1:string})" ],

    //Node断言测试（assert）
    [ "assert\tNodejs - Assert", "assert" ],
    [ "assert()\tNodejs - Assert", "assert(value${1:[,message]})" ],
    [ "ok()\tNodejs - Assert", "ok(value${1:[,message]})" ],
    [ "fail()\tNodejs - Assert", "fail(${1:actual},expected,message,operator)" ],
    [ "deepEqual()\tNodejs - Assert", "deepEqual(actual,expected${1:[,message]})" ],
    [ "notDeepEqual()\tNodejs - Assert", "notDeepEqual(actual,expected${1:[,message]})" ],
    [ "notDeepStrictEqual()\tNodejs - Assert", "notDeepStrictEqual(actual,expected${1:[,message]})" ],
    [ "notEqual()\tNodejs - Assert", "notEqual(actual,expected${1:[,message]})" ],
    [ "strictEqual()\tNodejs - Assert", "strictEqual(actual,expected${1:[,message]})" ],
    [ "notStrictEqual()\tNodejs - Assert", "notStrictEqual(actual,expected${1:[,message]})" ],
    [ "equal()\tNodejs - Assert", "equal(actual,expected${1:[,message]})" ],
    [ "deepStrictEqual()\tNodejs - Assert", "deepStrictEqual(actual,expected${1:[,message]})" ],
    [ "doesNotThrow()\tNodejs - Assert", "doesNotThrow(block${1:[,error,message]})" ],
    [ "throws()\tNodejs - Assert", "throws(block${1:[,error,message]})" ],
    [ "ifError()\tNodejs - Assert", "ifError(${1:value})" ],

    //Node地址解析模块（Url）
    [ "href\tNodejs - Url", "href" ],
    [ "protocol\tNodejs - Url", "protocol" ],
    [ "slashes\tNodejs - Url", "slashes" ],
    [ "host\tNodejs - Url", "host" ],
    [ "auth\tNodejs - Url", "auth" ],
    [ "hash\tNodejs - Url", "hash" ],
    [ "path\tNodejs - Url", "path" ],
    [ "query\tNodejs - Url", "query" ],
    [ "hostname\tNodejs - Url", "hostname" ],
    [ "search\tNodejs - Url", "search" ],
    [ "format()\tNodejs - Url", "format(${1:urlObject})" ],
    [ "resolve()\tNodejs - Url", "resolve(${1:form},to)" ],
    [ "parse()\tNodejs - Url", "parse(urlString${1:[,parseQueryString,slashesDenoteHost]})" ],





    // -------------------------------废弃方法--------------------------------------------------

    //Node异常处理模块（Domain）  ----6.10废弃----
    [ "domain\tNodejs - Domain", "domain" ],
    [ "exit()\tNodejs - Domain", "exit()" ],
    [ "members\tNodejs - Domain", "members" ],
    [ "run()\tNodejs - Domain", "run(${1:callback})" ],
    [ "create()\tNodejs - Domain", "create()" ],
    [ "enter()\tNodejs - Domain", "enter()" ],
    [ "dispose()\tNodejs - Domain", "dispose()" ],
    [ "bind()\tNodejs - Domain", "bind(${1:callback})" ],
    [ "intercept()\tNodejs - Domain", "intercept(${1:callback})" ],
    [ "add()\tNodejs - Domain", "add(${1:Emitter})" ],
    [ "remove()\tNodejs - Domain", "remove(${1:Emitter})" ],

     //（util）废弃方法，目前可用
    [ "isArray()\tNodejs - Util", "isArray(${1:object})" ],
    [ "isBoolean()\tNodejs - Util", "isBoolean(${1:object})" ],
    [ "isBuffer()\tNodejs - Util", "isBuffer(${1:object})" ],
    [ "isDate()\tNodejs - Util", "isDate(${1:object})" ],
    [ "isError()\tNodejs - Util", "isError(${1:object})" ],
    [ "isFunction()\tNodejs - Util", "isFunction(${1:object})" ],
    [ "isNull()\tNodejs - Util", "isNull(${1:object})" ],
    [ "isNullOrUndefined()\tNodejs - Util", "isNullOrUndefined(${1:object})" ],
    [ "isNumber()\tNodejs - Util", "isNumber(${1:object})" ],
    [ "isObject()\tNodejs - Util", "isObject(${1:object})" ],
    [ "isPrimitive()\tNodejs - Util", "isPrimitive(${1:object})" ],
    [ "isRegExp()\tNodejs - Util", "isRegExp(${1:object})" ],
    [ "isString()\tNodejs - Util", "isString(${1:object})" ],
    [ "isSymbol()\tNodejs - Util", "isSymbol(${1:object})" ],
    [ "isUndefined()\tNodejs - Util", "isUndefined(${1:object})" ],
    [ "log()\tNodejs - Util", "log(${1:string})" ],
    [ "print()\tNodejs - Util", "print(${1:[strings]})" ],
    [ "error()\tNodejs - Util", "error(${1:[strings]})" ],
    [ "puts()\tNodejs - Util", "puts(${1:[strings]})" ],
    [ "_extend()\tNodejs - Util", "_extend(${1:target},source)" ],
    [ "debug()\tNodejs - Util", "debug(${1:string})" ]

  ]
}