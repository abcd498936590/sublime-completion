{
  "scope": "source.js - string, source.coffee, source.js.embedded.html",

  "completions":
  [
    //Nodejs mongodb驱动
    [ "mongodb\tNodejs - MongoDB", "mongodb" ],
    //options
    [ "w\tMongoDB - Options", "w" ],
    [ "j\tMongoDB - Options", "j" ],
    [ "v\tMongoDB - Options", "v" ],
    [ "name\tMongoDB - Options", "name" ],
    [ "expireAfterSeconds\tMongoDB - Options", "expireAfterSeconds" ],
    [ "wtimeout\tMongoDB - Options", "wtimeout" ],
    [ "fsync\tMongoDB - Options", "fsync" ],
    [ "customData\tMongoDB - Options", "customData" ],
    [ "readPreference\tMongoDB - Options", "readPreference" ],
    [ "native_parser\tMongoDB - Options", "native_parser" ],
    [ "forceServerObjectId\tMongoDB - Options", "forceServerObjectId" ],
    [ "pkFactory\tMongoDB - Options", "pkFactory" ],
    [ "serializeFunctions\tMongoDB - Options", "serializeFunctions" ],
    [ "raw\tMongoDB - Options", "raw" ],
    [ "max\tMongoDB - Options", "max" ],
    [ "min\tMongoDB - Options", "min" ],
    [ "scale\tMongoDB - Options", "scale" ],
    [ "maxTimeMS\tMongoDB - Options", "maxTimeMS" ],
    [ "ignoreCommandFilter\tMongoDB - Options", "ignoreCommandFilter" ],
    [ "roles\tMongoDB - Options", "roles" ],
    [ "recordQueryStats\tMongoDB - Options", "recordQueryStats" ],
    [ "retryMiliSeconds\tMongoDB - Options", "retryMiliSeconds" ],
    [ "numberOfRetries\tMongoDB - Options", "numberOfRetries" ],
    [ "bufferMaxEntries\tMongoDB - Options", "bufferMaxEntries" ],
    [ "uri_decode_auth\tMongoDB - Options", "uri_decode_auth" ],
    [ "db\tMongoDB - Options", "db" ],
    [ "server\tMongoDB - Options", "server" ],
    [ "replSet\tMongoDB - Options", "replSet" ],
    [ "mongos\tMongoDB - Options", "mongos" ],
    [ "logger\tMongoDB - Options", "logger" ],
    [ "sparse\tMongoDB - Options", "sparse" ],
    [ "background\tMongoDB - Options", "background" ],
    [ "dropDups\tMongoDB - Options", "dropDups" ],
    [ "keeptemp\tMongoDB - Options", "keeptemp" ],
    [ "slaveOk\tMongoDB - Options", "slaveOk" ],
    [ "promoteLongs\tMongoDB - Options", "promoteLongs" ],
    [ "namesOnly\tMongoDB - Options", "namesOnly" ],
    [ "strict\tMongoDB - Options", "strict" ],
    [ "nolock\tMongoDB - Options", "nolock" ],
    [ "authMechanism\tMongoDB - Options", "authMechanism" ],
    [ "capped\tMongoDB - Options", "capped" ],
    [ "size\tMongoDB - Options", "size" ],
    [ "autoIndexId\tMongoDB - Options", "autoIndexId" ],
    [ "writeCommand\tMongoDB - Options", "writeCommand" ],
    [ "checkKeys\tMongoDB - Options", "checkKeys" ],
    [ "dropTarget\tMongoDB - Options", "dropTarget" ],
    [ "full\tMongoDB - Options", "full" ],
    [ "unique\tMongoDB - Options", "unique" ],
    [ "slaveOk \tMongoDB - Options", "slaveOk " ],
    [ "fullResult\tMongoDB - Options", "fullResult" ],
    [ "continueOnError\tMongoDB - Options", "continueOnError" ],
    [ "single\tMongoDB - Options", "single" ],
    [ "multi\tMongoDB - Options", "multi" ],
    [ "upsert\tMongoDB - Options", "upsert" ],
    [ "skip\tMongoDB - Options", "skip" ],
    [ "limit\tMongoDB - Options", "limit" ],
    [ "search\tMongoDB - Options", "search" ],
    [ "remove\tMongoDB - Options", "remove" ],
    [ "sort\tMongoDB - Options", "sort" ],
    [ "fields\tMongoDB - Options", "fields" ],
    [ "hint\tMongoDB - Options", "hint" ],
    [ "explain\tMongoDB - Options", "explain" ],
    [ "snapshot\tMongoDB - Options", "snapshot" ],
    [ "timeout\tMongoDB - Options", "timeout" ],
    [ "tailable\tMongoDB - Options", "tailable" ],
    [ "tailableRetryInterval\tMongoDB - Options", "tailableRetryInterval" ],
    [ "awaitdata\tMongoDB - Options", "awaitdata" ],
    [ "oplogReplay\tMongoDB - Options", "oplogReplay" ],
    [ "exhaust\tMongoDB - Options", "exhaust" ],
    [ "batchSize\tMongoDB - Options", "batchSize" ],
    [ "returnKey\tMongoDB - Options", "returnKey" ],
    [ "maxScan\tMongoDB - Options", "maxScan" ],
    [ "showDiskLoc\tMongoDB - Options", "showDiskLoc" ],
    [ "comment\tMongoDB - Options", "comment" ],
    [ "partial\tMongoDB - Options", "partial" ],
    [ "keys\tMongoDB - Options", "keys" ],
    [ "condition\tMongoDB - Options", "condition" ],
    [ "initial\tMongoDB - Options", "initial" ],
    [ "reduce\tMongoDB - Options", "reduce" ],
    [ "finalize\tMongoDB - Options", "finalize" ],
    [ "jsMode\tMongoDB - Options", "jsMode" ],
    [ "verbose\tMongoDB - Options", "verbose" ],
    [ "command\tMongoDB - Options", "command" ],
    [ "transform\tMongoDB - Options", "transform" ],
    [ "num\tMongoDB - Options", "num" ],
    [ "minDistance\tMongoDB - Options", "minDistance" ],
    [ "maxDistance\tMongoDB - Options", "maxDistance" ],
    [ "includeLocs\tMongoDB - Options", "includeLocs" ],
    [ "distanceMultiplier\tMongoDB - Options", "distanceMultiplier" ],
    [ "spherical\tMongoDB - Options", "spherical" ],
    [ "uniqueDocs\tMongoDB - Options", "uniqueDocs" ],
    [ "cursor\tMongoDB - Options", "cursor" ],
    [ "cursor.batchSize\tMongoDB - Options", "cursor.batchSize" ],
    [ "out\tMongoDB - Options", "out" ],
    [ "allowDiskUse\tMongoDB - Options", "allowDiskUse" ],
    [ "read\tMongoDB - Options", "read" ],
    [ "dbName\tMongoDB - Options", "dbName" ],
    [ "root\tMongoDB - Options", "root" ],
    [ "content_type\tMongoDB - Options", "content_type" ],
    [ "chunk_size\tMongoDB - Options", "chunk_size" ],
    [ "metadata\tMongoDB - Options", "metadata" ],
    [ "numCursors\tMongoDB - Options", "numCursors" ],
    [ "ssl\tMongoDB - Options", "ssl" ],
    [ "sslValidate\tMongoDB - Options", "sslValidate" ],
    [ "sslCA\tMongoDB - Options", "sslCA" ],
    [ "sslCert\tMongoDB - Options", "sslCert" ],
    [ "sslKey\tMongoDB - Options", "sslKey" ],
    [ "sslPass\tMongoDB - Options", "sslPass" ],
    [ "poolSize\tMongoDB - Options", "poolSize" ],
    [ "ha\tMongoDB - Options", "ha" ],
    [ "haInterval\tMongoDB - Options", "haInterval" ],
    [ "socketOptions\tMongoDB - Options", "socketOptions" ],
    [ "auto_reconnect\tMongoDB - Options", "auto_reconnect" ],
    [ "disableDriverBSONSizeCheck\tMongoDB - Options", "disableDriverBSONSizeCheck" ],
    [ "_id\tMongoDB - Options", "_id" ],
    [ "reconnectWait\tMongoDB - Options", "reconnectWait" ],
    [ "retries\tMongoDB - Options", "retries" ],
    [ "rs_name\tMongoDB - Options", "rs_name" ],
    [ "strategy\tMongoDB - Options", "strategy" ],
    [ "connectArbiter\tMongoDB - Options", "connectArbiter" ],
    [ "connectWithNoPrimary\tMongoDB - Options", "connectWithNoPrimary" ],
    [ "evalFunctions\tMongoDB - Options", "evalFunctions" ],
    [ "cacheFunctions\tMongoDB - Options", "cacheFunctions" ],
    [ "cacheFunctionsCrc32\tMongoDB - Options", "cacheFunctionsCrc32" ],
    [ "promoteLongs\tMongoDB - Options", "promoteLongs" ],

    //Constant
    [ "PRIMARY\tMongoDB - Constant", "PRIMARY" ],
    [ "PRIMARY_PREFERRED\tMongoDB - Constant", "PRIMARY_PREFERRED" ],
    [ "SECONDARY\tMongoDB - Constant", "SECONDARY" ],
    [ "SECONDARY_PREFERRED\tMongoDB - Constant", "SECONDARY_PREFERRED" ],
    [ "NEAREST\tMongoDB - Constant", "NEAREST" ],

    //Event
    [ "data\tMongoDB - Event", "data" ],
    [ "close\tMongoDB - Event", "close" ],
    [ "error\tMongoDB - Event", "error" ],
    [ "end\tMongoDB - Event", "end" ],

    //Admin
    [ "Admin\tMongoDB - Admin", "Admin" ],
    [ "Admin()\tMongoDB - Admin", "Admin(${1:object})" ],
    [ "buildInfo()\tMongoDB - Admin", "buildInfo(${1:callback.err.info})" ],
    [ "serverStatus()\tMongoDB - Admin", "serverStatus(${1:callback.err.info})" ],
    [ "profilingLevel()\tMongoDB - Admin", "profilingLevel(${1:callback.err.level})" ],
    [ "ping()\tMongoDB - Admin", "ping(${1:callback.err.pingResult})" ],
    [ "authenticate()\tMongoDB - Admin", "authenticate(username,password,${1:callback.err.result})" ],
    [ "logout()\tMongoDB - Admin", "logout(${1:[options,]}callback.err.result)" ],
    [ "addUser()\tMongoDB - Admin", "addUser(username,password,${1:[options,]}callback.err.result)" ],
    [ "removeUser()\tMongoDB - Admin", "removeUser(username,${1:[options,]}callback.err.result)" ],
    [ "setProfilingLevel()\tMongoDB - Admin", "setProfilingLevel(level,callback.err.level)" ],
    [ "profilingInfo()\tMongoDB - Admin", "profilingInfo(level,callback.err.infos)" ],
    [ "command()\tMongoDB - Admin", "command(command${1:[,options]},callback.err.info)" ],
    [ "validateCollection()\tMongoDB - Admin", "validateCollection(collectionName${1:[,options]},callback.err.doc)" ],
    [ "listDatabases()\tMongoDB - Admin", "listDatabases(${1:callback.err.dbs})" ],
    [ "replSetGetStatus()\tMongoDB - Admin", "replSetGetStatus(${1:callback.err.info})" ],

    //ReplSet
    [ "ReplSet\tMongoDB - ReplSet", "ReplSet" ],
    [ "ReplSet()\tMongoDB - ReplSet", "ReplSet(list${1:[options]})" ],
    [ "createServer()\tMongoDB - ReplSet", "createServer(${1:host},replset)" ],

    //Code
    [ "Code\tMongoDB - Code", "Code" ],
    [ "Code()\tMongoDB - Code", "Code(${1:code},scope)" ],

    //Double
    [ "Double\tMongoDB - Double", "Double" ],
    [ "Double()\tMongoDB - Double", "Double(${1:value})" ],

    //Timestamp
    [ "Timestamp\tMongoDB - Timestamp", "Timestamp" ],
    [ "Timestamp()\tMongoDB - Timestamp", "Timestamp(${1:low},high)" ],
    [ "toInt()\tMongoDB - Timestamp", "toInt()" ],
    [ "toNumber()\tMongoDB - Timestamp", "toNumber()" ],
    [ "toJSON()\tMongoDB - Timestamp", "toJSON()" ],
    [ "toString()\tMongoDB - Timestamp", "toString(${1:[opt_radix]})" ],
    [ "getHighBits()\tMongoDB - Timestamp", "getHighBits()" ],
    [ "getLowBits()\tMongoDB - Timestamp", "getLowBits()" ],
    [ "getLowBitsUnsigned()\tMongoDB - Timestamp", "getLowBitsUnsigned()" ],
    [ "getNumBitsAbs()\tMongoDB - Timestamp", "getNumBitsAbs()" ],
    [ "isZero()\tMongoDB - Timestamp", "isZero()" ],
    [ "isNegative()\tMongoDB - Timestamp", "isNegative()" ],
    [ "isOdd()\tMongoDB - Timestamp", "isOdd()" ],
    [ "negate()\tMongoDB - Timestamp", "negate()" ],
    [ "equals()\tMongoDB - Timestamp", "equals(${1:other})" ],
    [ "notEquals()\tMongoDB - Timestamp", "notEquals(${1:other})" ],
    [ "lessThan()\tMongoDB - Timestamp", "lessThan(${1:other})" ],
    [ "lessThanOrEqual()\tMongoDB - Timestamp", "lessThanOrEqual(${1:other})" ],
    [ "greaterThan()\tMongoDB - Timestamp", "greaterThan(${1:other})" ],
    [ "greaterThanOrEqual()\tMongoDB - Timestamp", "greaterThanOrEqual(${1:other})" ],
    [ "compare()\tMongoDB - Timestamp", "compare(${1:other})" ],
    [ "add()\tMongoDB - Timestamp", "add(${1:other})" ],
    [ "subtract()\tMongoDB - Timestamp", "subtract(${1:other})" ],
    [ "multiply()\tMongoDB - Timestamp", "multiply(${1:other})" ],
    [ "div()\tMongoDB - Timestamp", "div(${1:other})" ],
    [ "modulo()\tMongoDB - Timestamp", "modulo(${1:other})" ],
    [ "and()\tMongoDB - Timestamp", "and(${1:other})" ],
    [ "or()\tMongoDB - Timestamp", "or(${1:other})" ],
    [ "xor()\tMongoDB - Timestamp", "xor(${1:other})" ],
    [ "shiftLeft()\tMongoDB - Timestamp", "shiftLeft(${1:numBits})" ],
    [ "shiftRight()\tMongoDB - Timestamp", "shiftRight(${1:numBits})" ],
    [ "fromInt(class)\tMongoDB - Timestamp", "fromInt(${1:value})" ],
    [ "fromNumber(class)\tMongoDB - Timestamp", "fromNumber(${1:value})" ],
    [ "fromBits(class)\tMongoDB - Timestamp", "fromBits(${1:lowBits},highBits)" ],
    [ "fromString(class)\tMongoDB - Timestamp", "fromString(${1:str},opt_radix)" ],
    [ "shiftRightUnsigned()\tMongoDB - Timestamp", "shiftRightUnsigned(${1:numBits})" ],
    [ "not()\tMongoDB - Timestamp", "not()" ],

    //Binary
    [ "SUBTYPE_DEFAULT\tMongoDB - Binary", "SUBTYPE_DEFAULT" ],
    [ "SUBTYPE_FUNCTION\tMongoDB - Binary", "SUBTYPE_FUNCTION" ],
    [ "SUBTYPE_BYTE_ARRAY\tMongoDB - Binary", "SUBTYPE_BYTE_ARRAY" ],
    [ "SUBTYPE_UUID\tMongoDB - Binary", "SUBTYPE_UUID" ],
    [ "SUBTYPE_MD5\tMongoDB - Binary", "SUBTYPE_MD5" ],
    [ "SUBTYPE_USER_DEFINED \tMongoDB - Binary", "SUBTYPE_USER_DEFINED " ],
    [ "Binary()\tMongoDB - Binary", "Binary(buffer${1:[,subType]})" ],
    [ "put()\tMongoDB - Binary", "put(${1:byte_value})" ],
    [ "write()\tMongoDB - Binary", "write(${1:string},offset)" ],
    [ "read()\tMongoDB - Binary", "read(${1:position},length)" ],
    [ "value()\tMongoDB - Binary", "value()" ],
    [ "length()\tMongoDB - Binary", "length()" ],

    //ObjectID
    [ "ObjectID\tMongoDB - ObjectID", "ObjectID" ],
    [ "ObjectID()\tMongoDB - ObjectID", "ObjectID(${1:[id]})" ],
    [ "equals()\tMongoDB - ObjectID", "equals(${1:otherID})" ],
    [ "toHexString()\tMongoDB - ObjectID", "toHexString()" ],
    [ "isValid(class)\tMongoDB - ObjectID", "isValid()" ],
    [ "getTimestamp()\tMongoDB - ObjectID", "getTimestamp()" ],
    [ "createFromTime(class)\tMongoDB - ObjectID", "createFromTime(${1:time})" ],
    [ "createFromHexString(class)\tMongoDB - ObjectID", "createFromHexString(${1:hexString})" ],

    //Cursor
    [ "Cursor\tMongoDB - Cursor", "Cursor" ],
    [ "Cursor()\tMongoDB - Cursor", "Cursor(db,collection,selector,fields${1:[,options]})" ],
    [ "INIT\tMongoDB - Cursor", "INIT" ],
    [ "OPEN\tMongoDB - Cursor", "OPEN" ],
    [ "CLOSED\tMongoDB - Cursor", "CLOSED" ],
    [ "GET_MORE\tMongoDB - Cursor", "GET_MORE" ],
    [ "cloneWithOptions(class)\tMongoDB - Cursor", "cloneWithOptions(${1:cursor})" ],
    [ "rewind()\tMongoDB - Cursor", "rewind()" ],
    [ "stream()\tMongoDB - Cursor", "stream()" ],
    [ "isClosed()\tMongoDB - Cursor", "isClosed()" ],
    [ "toArray()\tMongoDB - Cursor", "toArray(${1:callback.err.items})" ],
    [ "each()\tMongoDB - Cursor", "each(${1:callback.err.items})" ],
    [ "count()\tMongoDB - Cursor", "count(${1:applySkipLimit},callback.err.count)" ],
    [ "sort()\tMongoDB - Cursor", "sort(keyOrList${1:[,direction,callback.err.item]})" ],
    [ "maxTimeMS()\tMongoDB - Cursor", "maxTimeMS(keyOrList${1:[,callback.err.result]})" ],
    [ "setReadPreference()\tMongoDB - Cursor", "setReadPreference(the${1:[,callback.err.result]})" ],
    [ "limit()\tMongoDB - Cursor", "limit(limit${1:[,callback.err.item]})" ],
    [ "skip()\tMongoDB - Cursor", "skip(skip${1:[,callback.err.result]})" ],
    [ "batchSize()\tMongoDB - Cursor", "batchSize(batchSize${1:[,callback.err.result]})" ],
    [ "nextObject()\tMongoDB - Cursor", "nextObject(${1:callback.err.item})" ],
    [ "explain()\tMongoDB - Cursor", "explain(${1:callback.err.item})" ],
    [ "close()\tMongoDB - Cursor", "close(${1:callback.err.result})" ],

    //GridStore
    [ "DEFAULT_ROOT_COLLECTION\tMongoDB - GridStore", "DEFAULT_ROOT_COLLECTION" ],
    [ "DEFAULT_CONTENT_TYPE\tMongoDB - GridStore", "DEFAULT_CONTENT_TYPE" ],
    [ "IO_SEEK_SET\tMongoDB - GridStore", "IO_SEEK_SET" ],
    [ "IO_SEEK_CUR\tMongoDB - GridStore", "IO_SEEK_CUR" ],
    [ "IO_SEEK_END\tMongoDB - GridStore", "IO_SEEK_END" ],
    [ "GridStore()\tMongoDB - GridStore", "GridStore(db${1:[,id,filename],mode,options})" ],
    [ "open()\tMongoDB - GridStore", "open(${1:callback.err.gridStore})" ],
    [ "puts()\tMongoDB - GridStore", "puts(${1:string},callback.err.gridStore)" ],
    [ "eof()\tMongoDB - GridStore", "eof()" ],
    [ "close()\tMongoDB - GridStore", "close(${1:callback.err.result})" ],
    [ "chunkCollection()\tMongoDB - GridStore", "chunkCollection(${1:callback.err.collection})" ],
    [ "unlink()\tMongoDB - GridStore", "unlink(${1:callback.err.result})" ],
    [ "tell()\tMongoDB - GridStore", "tell(${1:callback.err.position})" ],
    [ "getc()\tMongoDB - GridStore", "getc(${1:callback.err.chr})" ],
    [ "rewind()\tMongoDB - GridStore", "rewind(${1:callback.err.gridStore})" ],
    [ "collection()\tMongoDB - GridStore", "collection(${1:callback.err.collection})" ],
    [ "writeFile()\tMongoDB - GridStore", "writeFile(file,${1:callback.err.doc})" ],
    [ "readlines()\tMongoDB - GridStore", "readlines(${1:[separator,]}callback.err.lines)" ],
    [ "read()\tMongoDB - GridStore", "read(${1:[length,buffer,]}callback.err.result)" ],
    [ "seek()\tMongoDB - GridStore", "seek(${1:[position,seekLocation,]}callback.err.gridStore)" ],
    [ "stream()\tMongoDB - GridStore", "stream(${1:autoclose})" ],
    [ "exist(class)\tMongoDB - GridStore", "exist(db,name${1:[,rootCollection]},callback.err.result)" ],
    [ "list(class)\tMongoDB - GridStore", "list(db${1:[,rootCollection]},callback.err.items)" ],
    [ "read(class)\tMongoDB - GridStore", "read(db,name${1:[,length,offset,options]},callback.err.fileData)" ],
    [ "readlines(class)\tMongoDB - GridStore", "readlines(db,name${1:[,separator,options]},callback.err.lines)" ],
    [ "unlink(class)\tMongoDB - GridStore", "unlink(db,names${1:[,options]})" ],
    [ "write()\tMongoDB - GridStore", "write(data${1:[,close]},callback.err.gridStore)" ],

    //Server
    [ "Server()\tMongoDB - Server", "Server(host,port${1:[,options]})" ],
    [ "assignReplicaSet()\tMongoDB - Server", "assignReplicaSet(${1:options})" ],
    [ "inheritReplSetOptionsFrom()\tMongoDB - Server", "inheritReplSetOptionsFrom(${1:options})" ],

    //CursorStream
    [ "CursorStream()\tMongoDB - CursorStream", "CursorStream(${1:cursor})" ],

    //ReadStream
    [ "ReadStream()\tMongoDB - ReadStream", "ReadStream(${1:autoclose},cursor)" ],

    //ReadPreference
    [ "ReadPreference()\tMongoDB - ReadPreference", "ReadPreference(${1:the},tags)" ],

    //mongos
    [ "Mongos()\tMongoDB - Mongos", "Mongos(list${1:[,options]})" ],

    //OrderedBulkOperation
    [ "OrderedBulkOperation()\tMongoDB - OrderedBulkOperation", "OrderedBulkOperation(collection${1:[,options]})" ],
    [ "update()\tMongoDB - OrderedBulkOperation", "update(${1:doc})" ],
    [ "updateOne()\tMongoDB - OrderedBulkOperation", "updateOne(${1:doc})" ],
    [ "replaceOne()\tMongoDB - OrderedBulkOperation", "replaceOne(${1:doc})" ],
    [ "removeOne()\tMongoDB - OrderedBulkOperation", "removeOne(${1:doc})" ],
    [ "remove()\tMongoDB - OrderedBulkOperation", "remove(${1:doc})" ],
    [ "insert()\tMongoDB - OrderedBulkOperation", "insert(${1:doc})" ],
    [ "find()\tMongoDB - OrderedBulkOperation", "find(${1:doc})" ],
    [ "execute()\tMongoDB - OrderedBulkOperation", "execute(${1:[options,]}callback.err.result)" ],
    [ "upsert()\tMongoDB - OrderedBulkOperation", "upsert()" ],

    //UnorderedBulkOperation
    [ "UnorderedBulkOperation()\tMongoDB - UnorderedBulkOperation", "UnorderedBulkOperation(collection${1:[,options]})" ],
    [ "update()\tMongoDB - UnorderedBulkOperation", "update(${1:doc})" ],
    [ "updateOne()\tMongoDB - UnorderedBulkOperation", "updateOne(${1:doc})" ],
    [ "replaceOne()\tMongoDB - UnorderedBulkOperation", "replaceOne(${1:doc})" ],
    [ "upsert()\tMongoDB - UnorderedBulkOperation", "upsert()" ],
    [ "removeOne()\tMongoDB - UnorderedBulkOperation", "removeOne(${1:doc})" ],
    [ "remove()\tMongoDB - UnorderedBulkOperation", "remove(${1:doc})" ],
    [ "insert()\tMongoDB - OrderedBulkOperation", "insert(${1:doc})" ],
    [ "find()\tMongoDB - OrderedBulkOperation", "find(${1:selector})" ],
    [ "execute()\tMongoDB - OrderedBulkOperation", "execute(${1:[options,]}callback.err.result)" ],

    //Symbol
    [ "Symbol()\tMongoDB - Symbol", "Symbol(${1:value})" ],

    //BatchWriteResult
    [ "BatchWriteResult()\tMongoDB - BatchWriteResult", "BatchWriteResult(${1:batchResult})" ],
    [ "getUpsertedIds()\tMongoDB - BatchWriteResult", "getUpsertedIds()" ],
    [ "getUpsertedIdAt()\tMongoDB - BatchWriteResult", "getUpsertedIdAt(${1:index})" ],
    [ "getRawResponse()\tMongoDB - BatchWriteResult", "getRawResponse()" ],
    [ "hasWriteErrors()\tMongoDB - BatchWriteResult", "hasWriteErrors()" ],
    [ "getWriteErrorCount()\tMongoDB - BatchWriteResult", "getWriteErrorCount()" ],
    [ "getWriteErrorAt()\tMongoDB - BatchWriteResult", "getWriteErrorAt()" ],
    [ "getWriteErrors()\tMongoDB - BatchWriteResult", "getWriteErrors()" ],
    [ "getLastOp()\tMongoDB - BatchWriteResult", "getLastOp()" ],
    [ "getWriteConcernError()\tMongoDB - BatchWriteResult", "getWriteConcernError()" ],

    //BSON
    [ "BSON\tMongoDB - BSON", "BSON" ],
    [ "BSON()\tMongoDB - BSON", "BSON()" ],
    [ "calculateObjectSize(class)\tMongoDB - BSON", "calculateObjectSize(object${1:[,serializeFunctions]})" ],
    [ "serializeWithBufferAndIndex(class)\tMongoDB - BSON", "serializeWithBufferAndIndex(${1:object},checkKeys,buffer,index,serializeFunctions)" ],
    [ "serialize(class)\tMongoDB - BSON", "serialize(${1:object},checkKeys,asBuffer,serializeFunctions)" ],
    [ "deserializeStream(class)\tMongoDB - BSON", "deserializeStream(data,startIndex,numberOfDocuments,documents,docStartIndex${1:[,options]})" ],
    [ "deserialize(class)\tMongoDB - BSON", "deserialize(buffer${1:[,options,isArray]})" ],
    [ "deserialize()\tMongoDB - BSON", "deserialize(buffer${1:[,options,isArray]})" ],
    [ "deserializeStream()\tMongoDB - BSON", "deserializeStream(data,startIndex,numberOfDocuments,documents,docStartIndex${1:[,options]})" ],
    [ "serialize()\tMongoDB - BSON", "serialize(${1:object},checkKeys,asBuffer,serializeFunctions)" ],
    [ "calculateObjectSize()\tMongoDB - BSON", "calculateObjectSize(object${1:[,serializeFunctions]})" ],
    [ "serializeWithBufferAndIndex()\tMongoDB - BSON", "serializeWithBufferAndIndex(${1:object},checkKeys,buffer,index,serializeFunctions)" ],

    //Long
    [ "Long\tMongoDB - Long", "Long" ],
    [ "Long()\tMongoDB - Long", "Long(${1:low},high)" ],
    [ "toInt()\tMongoDB - Long", "toInt()" ],
    [ "toNumber()\tMongoDB - Long", "toNumber()" ],
    [ "toJSON()\tMongoDB - Long", "toJSON()" ],
    [ "toString()\tMongoDB - Long", "toString()" ],
    [ "getHighBits()\tMongoDB - Long", "getHighBits()" ],
    [ "getLowBits()\tMongoDB - Long", "getLowBits()" ],
    [ "getLowBitsUnsigned()\tMongoDB - Long", "getLowBitsUnsigned()" ],
    [ "getNumBitsAbs()\tMongoDB - Long", "getNumBitsAbs()" ],
    [ "isZero()\tMongoDB - Long", "isZero()" ],
    [ "isNegative()\tMongoDB - Long", "isNegative()" ],
    [ "isOdd()\tMongoDB - Long", "isOdd()" ],
    [ "equals()\tMongoDB - Long", "equals()" ],
    [ "notEquals()\tMongoDB - Long", "notEquals()" ],
    [ "lessThan()\tMongoDB - Long", "lessThan()" ],
    [ "lessThanOrEqual()\tMongoDB - Long", "lessThanOrEqual()" ],
    [ "greaterThan()\tMongoDB - Long", "greaterThan()" ],
    [ "greaterThanOrEqual()\tMongoDB - Long", "greaterThanOrEqual()" ],
    [ "compare()\tMongoDB - Long", "compare()" ],
    [ "negate()\tMongoDB - Long", "negate()" ],
    [ "add()\tMongoDB - Long", "add(${1:other})" ],
    [ "subtract()\tMongoDB - Long", "subtract(${1:other})" ],
    [ "multiply()\tMongoDB - Long", "multiply(${1:other})" ],
    [ "div()\tMongoDB - Long", "div(${1:other})" ],
    [ "modulo()\tMongoDB - Long", "modulo(${1:other})" ],
    [ "not()\tMongoDB - Long", "not(${1:other})" ],
    [ "and()\tMongoDB - Long", "and(${1:other})" ],
    [ "or()\tMongoDB - Long", "or(${1:other})" ],
    [ "xor()\tMongoDB - Long", "xor(${1:other})" ],
    [ "shiftLeft()\tMongoDB - Long", "shiftLeft(${1:numBits})" ],
    [ "shiftRight()\tMongoDB - Long", "shiftRight(${1:numBits})" ],
    [ "shiftRightUnsigned()\tMongoDB - Long", "shiftRightUnsigned(${1:numBits})" ],
    [ "fromInt(class)\tMongoDB - Long", "fromInt(${1:value})" ],
    [ "fromNumber(class)\tMongoDB - Long", "fromNumber(${1:value})" ],
    [ "fromBits(class)\tMongoDB - Long", "fromBits(${1:lowBits},highBits)" ],
    [ "fromString(class)\tMongoDB - Long", "fromString(${1:str},opt_radix)" ],

    //Grid
    [ "Grid\tMongoDB - Grid", "Grid" ],
    [ "Grid()\tMongoDB - Grid", "Grid(db${1:[fsName]})" ],
    [ "put()\tMongoDB - Grid", "put(data${1:[,options]},callback.err.result)" ],
    [ "get()\tMongoDB - Grid", "get(${1:id},callback.err.data)" ],
    [ "delete()\tMongoDB - Grid", "delete(${1:id},callback.err.result)" ],

    //MinKey
    [ "MinKey\tMongoDB - MinKey", "MinKey" ],
    [ "MinKey()\tMongoDB - MinKey", "MinKey()" ],

    //MaxKey
    [ "MaxKey\tMongoDB - MaxKey", "MaxKey" ],
    [ "MaxKey()\tMongoDB - MaxKey", "MaxKey()" ],

    //MongoClient
    [ "MongoClient\tMongoDB - MongoClient", "MongoClient" ],
    [ "MongoClient()\tMongoDB - MongoClient", "MongoClient(serverConfig${1:[,options]})" ],
    [ "connect(class)\tMongoDB - MongoClient", "connect(url${1:[options]},callback.err.db)" ],
    [ "close()\tMongoDB - MongoClient", "close()" ],
    [ "db()\tMongoDB - Db/MongoClient", "db(${1:DBname})" ],

    //Collection
    [ "Collection()\tMongoDB - Collection", "Collection(db,collectionName${1:[,pkFactory,options]})" ],
    [ "deleteOne()\tMongoDB - Collection", "deleteOne(${1:[filter,options,callback.err.result]})" ],
    [ "deleteMany()\tMongoDB - Collection", "deleteMany(${1:[filter,options,callback.err.result]})" ],
    [ "insert()\tMongoDB - Collection", "insert(docs${1:[,options,callback.err.result]})" ],
    [ "insertOne()\tMongoDB - Collection", "insertOne(docs${1:[,options,callback.err.CommandResult]})" ],
    [ "save()\tMongoDB - Collection", "save(${1:[doc,options,callback.err.result]})" ],
    [ "rename()\tMongoDB - Collection", "rename(newName${1:[,options]},callback.err.collection)" ],
    [ "update()\tMongoDB - Collection", "update(selector,document${1:[,options,callback.err.result]})" ],
    [ "distinct()\tMongoDB - Collection", "distinct(key${1:[,query,options,callback.err.docs]})" ],
    [ "count()\tMongoDB - Collection", "count(${1:[query,options,]}callback.err.count)" ],
    [ "drop()\tMongoDB - Collection", "drop(${1:callback.err.reply})" ],
    [ "options()\tMongoDB - Collection", "options(${1:callback.err.options})" ],
    [ "isCapped()\tMongoDB - Collection", "isCapped(${1:callback.err.capped})" ],
    [ "indexExists()\tMongoDB - Collection", "indexExists(${1:indexNames},callback.err.result)" ],
    [ "find()\tMongoDB - Collection", "find(query${1:[,options]},callback.err.doc)" ],
    [ "findOne()\tMongoDB - Collection", "findOne(query${1:[,options]},callback.err.doc)" ],
    [ "indexes()\tMongoDB - Collection", "indexes(${1:callback.err.indexes})" ],
    [ "createIndex()\tMongoDB - Collection", "createIndex(fieldOrSpec${1:[,options]},callback.err.indexName)" ],
    [ "ensureIndex()\tMongoDB - Collection", "ensureIndex(fieldOrSpec${1:[,options]},callback.err.indexName)" ],
    [ "indexInformation()\tMongoDB - Collection", "indexInformation(err,${1:callback.err.indexInformation})" ],
    [ "dropIndex()\tMongoDB - Collection", "dropIndex(name,${1:callback.err.result})" ],
    [ "dropAllIndexes()\tMongoDB - Collection", "dropAllIndexes(${1:callback.err.result})" ],
    [ "reIndex()\tMongoDB - Collection", "reIndex(${1:callback.err.result})" ],
    [ "mapReduce()\tMongoDB - Collection", "mapReduce(map,reduce${1:[,options]},callback.err.collection)" ],
    [ "group()\tMongoDB - Collection", "group(keys,condition,initial,reduce,finalize,command${1:[,options]},callback.err.results)" ],
    [ "geoNear()\tMongoDB - Collection", "geoNear(x,y${1:[,options]},callback.err.docs)" ],
    [ "geoHaystackSearch()\tMongoDB - Collection", "geoHaystackSearch(x,y${1:[,options]},callback.err.docs)" ],
    [ "aggregate()\tMongoDB - Collection", "aggregate(array${1:[,options]},callback.err.result)" ],
    [ "stats()\tMongoDB - Collection", "stats(${1:[options,]}callback.err.stats)" ],
    [ "initializeUnorderedBulkOp()\tMongoDB - Collection", "initializeUnorderedBulkOp(${1:[options,]}callback.err.UnorderedBulkOperation)" ],
    [ "initializeOrderedBulkOp()\tMongoDB - Collection", "initializeOrderedBulkOp(${1:[options,]}callback.err.OrderedBulkOperation)" ],

    //Db
    [ "Db()\tMongoDB - Db", "Db(databaseName,serverConfig${1:[,options]})" ],
    [ "DEFAULT_URL\tMongoDB - Db", "DEFAULT_URL" ],
    [ "close()\tMongoDB - Db", "close(${1:[forceClose,]}callback)" ],
    [ "connect(Db)\tMongoDB - Db", "connect(url${1:[,options]},callback.err.db)" ],
    [ "stats()\tMongoDB - Db", "stats(${1:[options,]}callback.err.stats)" ],
    [ "dropDatabase()\tMongoDB - Db", "dropDatabase(${1:callback.err.result})" ],
    [ "cursorInfo()\tMongoDB - Db", "cursorInfo(${1:[options,]}callback.err.cursorInformation)" ],
    [ "admin()\tMongoDB - Db", "admin(${1:[callback]})" ],
    [ "command()\tMongoDB - Db", "command(selector${1:[,options]},callback.err.result)" ],
    [ "addUser()\tMongoDB - Db", "addUser(username,password${1:[,options]},callback.err.result)" ],
    [ "removeUser()\tMongoDB - Db", "removeUser(username${1:[,options]},callback.err.result)" ],
    [ "authenticate()\tMongoDB - Db", "authenticate(username,password${1:[,options]},callback.err.result)" ],
    [ "logout()\tMongoDB - Db", "logout(${1:callback.err.result})" ],
    [ "createIndex()\tMongoDB - Db", "createIndex(collectionName,fieldOrSpec${1:[,options]},callback.err.indexName)" ],
    [ "dropIndex()\tMongoDB - Db", "dropIndex(collectionName,indexName,callback.err.result)" ],
    [ "indexInformation()\tMongoDB - Db", "indexInformation(collectionName${1:[,options]},callback.err.indexInformation)" ],
    [ "reIndex()\tMongoDB - Db", "reIndex(${1:collectionName},callback.err.result)" ],
    [ "ensureIndex()\tMongoDB - Db", "ensureIndex(collectionName,fieldOrSpec${1:[,options]},callback.err.indexName)" ],
    [ "dereference()\tMongoDB - Db", "dereference(${1:dbRef},callback.err.item)" ],
    [ "eval()\tMongoDB - Db", "eval(code${1:[,parameters,options]},callback.err.result)" ],
    [ "collectionNames()\tMongoDB - Db", "collectionNames(${1:[collectionName,options]},callback.err.item)" ],
    [ "collection()\tMongoDB - Db", "collection(collectionName${1:[,options, callback.err.coll]})" ],
    [ "collections()\tMongoDB - Db", "collections(callback.err.collection)" ],
    [ "collectionsInfo()\tMongoDB - Db", "collectionsInfo(${1:[collectionName,]callback.err.cursor})" ],
    [ "collectionsInfos()\tMongoDB - Db", "collectionsInfos(collectionName${1:[,options],callback.err.items})" ],
    [ "createCollection()\tMongoDB - Db", "createCollection(collectionName${1:[,options],callback.err.collection})" ],
    [ "dropCollection()\tMongoDB - Db", "dropCollection(${1:collectionName},callback.err.collection})" ],
    [ "renameCollection()\tMongoDB - Db", "renameCollection(fromCollection,toCollection${1:[,options]},callback.err.collection)" ]

  ]
}