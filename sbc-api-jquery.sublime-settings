{
  "scope": "source.js - string, source.coffee, source.js.embedded.html",

  // Deprecated Source : http://api.jquery.com/category/deprecated/
  // Source            : http://oscarotero.com/jquery/
  "completions":
  [

    //jQuery部分
    [ "jQuery\tjQuery", "jQuery" ],
    [ "context \tjQuery", "context" ],
    [ "off\tjQuery", "off" ],

    //jQuery事件
    [ "click()\tjQuery - Event", "click(callback.event)" ],
    [ "blur()\tjQuery - Event", "blur(callback.event)" ],
    [ "change()\tjQuery - Event", "change(callback.event)" ],
    [ "focus()\tjQuery - Event", "focus(callback.event)" ],
    [ "focusin()\tjQuery - Event", "focusin(callback.event)" ],
    [ "focusout()\tjQuery - Event", "focusout(callback.event)" ],
    [ "one()\tjQuery - Event", "one(callback.event)" ],
    [ "off()\tjQuery - Event", "off(${1:eventType},element,callback )" ],
    [ "on()\tjQuery - Event", "on(${1:eventType},data,callback)" ],
    [ "bind()\tjQuery - Event", "bind(${1:eventName},callback.event)" ],
    [ "live()\tjQuery - Event", "live(${1:eventType},data,callback)" ],
    [ "delegate()\tjQuery - Event", "delegate(${1:selector},eventType,callback)" ],
    [ "unbind()\tjQuery - Event", "unbind(callback.event)" ],
    [ "undelegate()\tjQuery - Event", "undelegate(${1:selector},eventType,callback)" ],
    [ "keydown()\tjQuery - Event", "keydown(callback.event)" ],
    [ "keypress()\tjQuery - Event", "keypress(callback.event)" ],
    [ "keyup()\tjQuery - Event", "keyup(callback.event)" ],
    [ "load()\tjQuery - Event", "load(callback.event)" ],
    [ "error()\tjQuery - Event", "error(callback.event)" ],
    [ "mousedown()\tjQuery - Event", "mousedown(callback.event)" ],
    [ "mouseenter()\tjQuery - Event", "mouseenter(callback.event)" ],
    [ "mouseleave()\tjQuery - Event", "mouseleave(callback.event)" ],
    [ "mousemove()\tjQuery - Event", "mousemove(callback.event)" ],
    [ "mousewheel()\tjQuery - Event", "mousewheel(callback.event)" ],
    [ "mouseout()\tjQuery - Event", "mouseout(callback.event)" ],
    [ "mouseover()\tjQuery - Event", "mouseover(callback.event)" ],
    [ "mouseup()\tjQuery - Event", "mouseup(callback.event)" ],
    [ "dblclick()\tjQuery - Event", "dblclick(callback.event)" ],
    [ "unload()\tjQuery - Event", "unload(callback.event)" ],
    [ "die()\tjQuery - Event", "die(${1:eventType},callback)" ],
    [ "error()\tjQuery - Event", "error(callback.event)" ],
    [ "hover()\tjQuery - Event", "hover(${1:changeFn})" ],
    [ "ready()\tjQuery - Event", "ready(callback.event)" ],
    [ "resize()\tjQuery - Event", "resize(callback.event)" ],
    [ "scroll()\tjQuery - Event", "scroll(callback.event)" ],
    [ "select()\tjQuery - Event", "select(callback.event)" ],
    [ "submit()\tjQuery - Event", "submit(callback.event)" ],
    [ "toggle()\tjQuery - Event", "toggle(${1:changeFn})" ],
    [ "trigger()\tjQuery - Event", "trigger(${1:eventType},data)" ],
    [ "triggerHandler()\tjQuery - Event", "triggerHandler(${1:eventType},data)" ],

    //jquery事件对象属性
    [ "currentTarget\tjQuery - EventAttr", "currentTarget" ],
    [ "data\tjQuery - EventAttr", "data" ],
    [ "delegateTarget\tjQuery - EventAttr", "delegateTarget" ],
    [ "isDefaultPrevented()\tjQuery - EventAttr", "isDefaultPrevented()" ],
    [ "isImmediatePropagationStopped()\tjQuery - EventAttr", "isImmediatePropagationStopped()" ],
    [ "isPropagationStopped()\tjQuery - EventAttr", "isPropagationStopped()" ],
    [ "namespace\tjQuery - EventAttr", "namespace" ],
    [ "metaKey\tjQuery - EventAttr", "metaKey" ],
    [ "pageX\tjQuery - EventAttr", "pageX" ],
    [ "pageY\tjQuery - EventAttr", "pageY" ],
    [ "preventDefault()\tjQuery - EventAttr", "preventDefault()" ],
    [ "relatedTarget\tjQuery - EventAttr", "relatedTarget" ],
    [ "result\tjQuery - EventAttr", "result" ],
    [ "stopImmediatePropagation()\tjQuery - EventAttr", "stopImmediatePropagation()" ],
    [ "stopPropagation()\tjQuery - EventAttr", "stopPropagation()" ],
    [ "target\tjQuery - EventAttr", "target" ],
    [ "timeStamp\tjQuery - EventAttr", "timeStamp" ],
    [ "type\tjQuery - EventAttr", "type" ],
    [ "which\tjQuery - EventAttr", "which" ],

    //jquery元素过滤,遍历,筛选方法
    [ "eq()\tjQuery", "eq(${1:index})" ],
    [ "filter()\tjQuery", "filter(${1:selector})" ],
    [ "first()\tjQuery", "first()" ],
    [ "has()\tjQuery", "has(${1:selector})" ],
    [ "is()\tjQuery", "is(${1:selector})" ],
    [ "last()\tjQuery", "last()" ],
    [ "not()\tjQuery", "not(${1:selector})" ],
    [ "slice()\tjQuery", "slice(${1:start},end)" ],
    [ "add()\tjQuery", "add(${1:selector})" ],
    [ "addBack()\tjQuery", "addBack(${1:selector})" ],
    [ "andSelf()\tjQuery", "andSelf()" ],
    [ "contents()\tjQuery", "contents()" ],
    [ "end()\tjQuery", "end()" ],
    [ "each()\tjQuery", "each(${1:array},callback.index.value)" ],
    [ "map()\tjQuery", "map(${1:array},callback.index.value)" ],
    [ "children()\tjQuery", "children(${1:selector})" ],
    [ "closest()\tjQuery", "closest(${1:selectors})" ],
    [ "find()\tjQuery", "find(${1:selector})" ],
    [ "next()\tjQuery", "next(${1:selector})" ],
    [ "nextAll()\tjQuery", "nextAll(${1:selector})" ],
    [ "nextUntil()\tjQuery", "nextUntil(${1:selector})" ],
    [ "offsetParent()\tjQuery", "offsetParent()" ],
    [ "parent()\tjQuery", "parent(${1:selector})" ],
    [ "parents()\tjQuery", "parents(${1:selector})" ],
    [ "parentsUntil()\tjQuery", "parentsUntil(${1:selector})" ],
    [ "prev()\tjQuery", "prev(${1:selector})" ],
    [ "prevAll()\tjQuery", "prevAll(${1:selector})" ],
    [ "prevUntil()\tjQuery", "prevUntil(${1:selector})" ],
    [ "siblings()\tjQuery", "siblings(${1:selector})" ],

    //jquery工具方法
    [ "clearQueue()\tjQuery", "clearQueue(${1:queueName})" ],
    [ "dequeue()\tjQuery", "dequeue(${1:queueName})" ],
    [ "boxModel\tjQuery ", "boxModel" ],
    [ "browser\tjQuery ", "browser" ],
    [ "contains()\tjQuery", "contains(${1:container},contained)" ],
    [ "data()\tjQuery", "data(${1:element},key,value)" ],
    [ "hasData()\tjQuery", "hasData(${1:element})" ],
    [ "extend()\tjQuery", "extend(${1:Boolean},target,obj)" ],
    [ "globalEval()\tjQuery", "globalEval(${1:code})" ],
    [ "grep()\tjQuery", "grep(${1:array},callback.element.index)" ],
    [ "inArray()\tjQuery", "isArray(${1:value},array,position)" ],
    [ "isArray()\tjQuery", "isArray(${1:obj})" ],
    [ "isEmptyObject()\tjQuery", "isEmptyObject(${1:object})" ],
    [ "isFunction()\tjQuery", "isFunction(${1:obj})" ],
    [ "isNumeric()\tjQuery", "isNumeric(${1:value})" ],
    [ "isPlainObject()\tjQuery", "isPlainObject(${1:object})" ],
    [ "isWindow()\tjQuery", "isWindow(${1:obj})" ],
    [ "isXMLDoc()\tjQuery", "isXMLDoc(${1:node})" ],
    [ "makeArray()\tjQuery", "makeArray(${1:obj})" ],
    [ "map()\tjQuery", "map(${1:array},callback.index.value)" ],
    [ "merge()\tjQuery", "merge(${1:arr1},arr2)" ],
    [ "noop()\tjQuery", "noop()" ],
    [ "now()\tjQuery", "now()" ],
    [ "parseJSON()\tjQuery", "parseJSON(${1:json})" ],
    [ "parseXML()\tjQuery", "parseXML(${1:data})" ],
    [ "parseHTML()\tjQuery", "parseXML(${1:string})" ],
    [ "param()\tjQuery", "param(${1:obj},Boolean)" ],
    [ "proxy()\tjQuery", "proxy(${1:obj},fnName)" ],
    [ "queue()\tjQuery", "queue(${1:element},queueName)" ],
    [ "removeData()\tjQuery", "removeData(${1:element},dataName)" ],
    [ "support\tjQuery", "support" ],
    [ "trim()\tjQuery", "trim(${1:string})" ],
    [ "type()\tjQuery", "type(${1:obj})" ],
    [ "unique()\tjQuery", "unique(${1:array})" ],
    [ "serialize()\tjQuery", "serialize()" ],
    [ "serializeArray()\tjQuery", "serializeArray()" ],

    //jquery核心API
    [ "holdReady()\tjQuery", "holdReady(${1:Boolean})" ],
    [ "jQuery()\tjQuery", "jQuery(${1:selector})" ],
    [ "noConflict()\tjQuery", "noConflict(${1:Boolean})" ],
    [ "sub()\tjQuery", "sub()" ],

    //jquery.DOM元素操作
    [ "addClass()\tjQuery", "addClass(${1:classname})" ],
    [ "hasClass()\tjQuery", "hasClass(${1:className})" ],
    [ "removeClass()\tjQuery", "removeClass(${1:className})" ],
    [ "toggleClass()\tjQuery", "toggleClass(${1:classname},callback)" ],
    [ "attr()\tjQuery", "attr(${1:attrName})" ],
    [ "html()\tjQuery", "html(${1:atring} )" ],
    [ "prop()\tjQuery", "prop(${1:objAttrbule})" ],
    [ "removeAttr()\tjQuery", "removeAttr(${1:attrName})" ],
    [ "removeProp()\tjQuery", "removeProp(${1:objAttrbule})" ],
    [ "val()\tjQuery", "val(${1:string})" ],
    [ "height()\tjQuery", "height()" ],
    [ "innerHeight()\tjQuery", "innerHeight()" ],
    [ "innerWidth()\tjQuery", "innerWidth()" ],
    [ "outerHeight()\tjQuery", "outerHeight(${1:Boolean})" ],
    [ "outerWidth()\tjQuery", "outerWidth(${1:Boolean})" ],
    [ "cssHooks\tjQuery", "cssHooks" ],
    [ "cssNumber\tjQuery", "cssNumber" ],
    [ "offset()\tjQuery", "offset()" ],
    [ "position()\tjQuery", "position()" ],
    [ "scrollLeft()\tjQuery", "scrollLeft()" ],
    [ "scrollTop()\tjQuery", "scrollTop()" ],
    [ "css()\tjQuery", "css($1)" ],
    [ "get()\tjQuery", "get(${1:index})" ],
    [ "has()\tjQuery", "has(${1:selector})" ],
    [ "index()\tjQuery", "index(${1:index})" ],
    [ "insertAfter()\tjQuery", "insertAfter(${1:target})" ],
    [ "insertBefore()\tjQuery", "insertBefore(${1:target})" ],
    [ "prepend()\tjQuery", "prepend(${1:contents})" ],
    [ "prependTo()\tjQuery", "prependTo(${1:target})" ],
    [ "promise()\tjQuery", "promise(${1:type},target)" ],
    [ "pushStack()\tjQuery", "pushStack(${1:elements})" ],
    [ "queue()\tjQuery", "queue(${1:queueName})" ],
    [ "remove()\tjQuery", "remove(${1:[selector]})" ],
    [ "replaceAll()\tjQuery", "replaceAll(${1:target})" ],
    [ "replaceWith()\tjQuery", "replaceWith(${1:newContent_or_fn})" ],
    [ "size()\tjQuery", "size()" ],
    [ "text()\tjQuery", "text()" ],
    [ "toArray()\tjQuery", "toArray()" ],
    [ "unwrap()\tjQuery", "unwrap()" ],
    [ "width()\tjQuery", "width()" ],
    [ "width(value)\tjQuery", "width(${1:value_or_fn})" ],
    [ "wrap()\tjQuery", "wrap(${1:element_or_fn})" ],
    [ "wrapAll()\tjQuery", "wrapAll(${1:wrappingElement})" ],
    [ "wrapInner()\tjQuery", "wrapInner(${1:element_or_fn})" ],
    [ "data()\tjQuery", "data(obj,${1:[key,value]})" ],
    [ "clone()\tjQuery", "clone(${1:[Boolean,Boolean]})" ],
    [ "empty()\tjQuery", "empty()" ],
    [ "after()\tjQuery", "after(${1:contents_or_fn})" ],
    [ "append()\tjQuery", "append(${1:contents_or_fn})" ],
    [ "appendTo()\tjQuery", "appendTo(${1:target})" ],
    [ "before()\tjQuery", "before(${1:contents_or_fn})" ],

    //jquery延迟对象方法
    [ "always()\tjQuery - deferred", "always(${1:alwaysCallbacks})" ],
    [ "done()\tjQuery - deferred", "done(${1:doneCallbacks})" ],
    [ "fail()\tjQuery - deferred", "fail(${1:failCallbacks})" ],
    [ "isRejected()\tjQuery - deferred", "isRejected()" ],
    [ "isResolved()\tjQuery - deferred", "isResolved()" ],
    [ "notify()\tjQuery - deferred", "notify(${1:args})" ],
    [ "notifyWith()\tjQuery - deferred", "notifyWith(context${1:[,args]})" ],
    [ "pipe()\tjQuery - deferred", "pipe(${1:[doneFilter,failFilter,progressFilter]})" ],
    [ "progress()\tjQuery - deferred", "progress(${1:progressCallbacks})" ],
    [ "promise()\tjQuery - deferred", "promise(${1:[target]})" ],
    [ "reject()\tjQuery - deferred", "reject(${1:args})" ],
    [ "rejectWith()\tjQuery - deferred", "rejectWith(context${1:[,args]})" ],
    [ "resolve()\tjQuery - deferred", "resolve(${1:args})" ],
    [ "resolveWith()\tjQuery - deferred", "resolveWith(context${1:[, args]})" ],
    [ "state()\tjQuery - deferred", "state()" ],
    [ "then()\tjQuery - deferred", "then(doneCallbacks,failCallbacks${1:[,progressCallbacks]})" ],
    [ "Deferred()\tjQuery - deferred", "Deferred()" ],
    [ "when()\tjQuery - deferred", "when(${1:Deferred})" ],

    //jquery动画效果
    [ "animate()\tjQuery", "animate(json${1:[,speed,easing,callback]})" ],
    [ "delay()\tjQuery", "delay(number${1:[,queueName]})" ],
    [ "fadeIn()\tjQuery", "fadeIn(${1:[duration,easing,callback]})" ],
    [ "fadeOut()\tjQuery", "fadeOut(${1:[duration,easing,callback]})" ],
    [ "fadeTo()\tjQuery", "fadeTo(duration,opacity${1:[,easing,callback]})" ],
    [ "fadeToggle()\tjQuery", "fadeToggle(${1:[duration,easing,callback]})" ],
    [ "slideDown()\tjQuery", "slideDown(${1:[duration,easing,callback]})" ],
    [ "slideToggle()\tjQuery", "slideToggle(${1:[duration,easing,callback]})" ],
    [ "slideUp()\tjQuery", "slideUp(${1:[duration,easing,callback]})" ],
    [ "hide()\tjQuery", "hide()" ],
    [ "finish()\tjQuery", "finish()" ],
    [ "interval\tjQuery", "interval" ],
    [ "show()\tjQuery", "show()" ],
    [ "stop()\tjQuery", "stop(${1:[Boolean,Boolean]})" ],

    //jquery回调对象
    [ "callbacks\tjQuery", "callbacks" ],
    [ "Callbacks()\tjQuery", "Callbacks(${1:string})" ],
    [ "add()\tjQuery - callbacks", "add(${1:callbacks})" ],
    [ "disable()\tjQuery - callbacks", "disable()" ],
    [ "disabled()\tjQuery - callbacks", "disabled()" ],
    [ "empty()\tjQuery - callbacks", "empty()" ],
    [ "fire()\tjQuery - callbacks", "fire(${1:arguments})" ],
    [ "fired()\tjQuery - callbacks", "fired()" ],
    [ "fireWith()\tjQuery - callbacks", "fireWith(context${1:[,args]})" ],
    [ "lock()\tjQuery - callbacks", "lock()" ],
    [ "locked()\tjQuery - callbacks", "locked()" ],
    [ "remove()\tjQuery - callbacks", "remove(${1:callbacks})" ],
    [ "has()\tjQuery - callbacks", "has(${1:selector/contained})" ],

    // Ajax - 完成
    [ "ajax(ajax)\tjQuery - ajax", "ajax({\n    type: 'GET',\n    async: true,\n    url : '${1:location}',\n    data : 'data=data',\n    dataType : 'json',\n    success : function(data){    \n        \n    },\n    error : function(xhr, errorData){\n        \n    }\n})" ],
    [ "ajax(jsonp)\tjQuery - ajax", "ajax({\n    type: 'GET',\n    url: '${1:location}',\n    data: 'data=data',\n    dataType: 'jsonp',\n    jsonpCallback: 'fn',\n    jsonp: 'callback',\n    success: function(data){\n        \n    },\n    error: function(xhr, errorData){\n        \n    }\n})" ],
    [ "post()\tjQuery - ajax", "post(url${1:[,data,success.data,textStatus,jqXHR,dataType]})" ],
    [ "get()\tjQuery - ajax", "get(url${1:[,data,success.data,textStatus,jqXHR,dataType]})" ],
    [ "getJSON()\tjQuery - ajax", "getJSON(url${1:[,data,success.data,textStatus,jqXHR]})" ],
    [ "getScript()\tjQuery - ajax", "getScript(url${1:[,success.data,textStatus,jqXHR]})" ],
    [ "ajaxPrefilter()\tjQuery - ajax", "ajaxPrefilter($1)" ],
    [ "ajaxSetup()\tjQuery - ajax", "ajaxSetup(${1:options})" ],
    [ "ajaxComplete()\tjQuery - ajax", "ajaxComplete(${1:handler})" ],
    [ "ajaxError()\tjQuery - ajax", "ajaxError(${1:handler})" ],
    [ "ajaxSend()\tjQuery - ajax", "ajaxSend(${1:handler})" ],
    [ "ajaxStart()\tjQuery - ajax", "ajaxStart(${1:handler})" ],
    [ "ajaxStop()\tjQuery - ajax", "ajaxStop(${1:handler})" ],
    [ "ajaxSuccess()\tjQuery - ajax", "ajaxSuccess(${1:handler})" ],
    [ "ajaxTransport()\tjQuery - ajax", "ajaxTransport(${1:handler})" ],
    [ "ajaxSetup()\tjQuery - ajax", "ajaxSetup(${1:handler})" ],
    [ "ajaxSetup()\tjQuery - ajax", "ajaxSetup(${1:handler})" ],
    [ "load()\tjQuery - ajax", "load(${1:url},data,callback.response.status.xhr)" ],
    [ "ajaxSetup()\tjQuery - ajax", "ajaxSetup(${1:handler})" ],
    // Ajax - 参数
    [ "async\tjQuery - ajax", "async" ],
    [ "beforeSend\tjQuery - ajax", "beforeSend.xhr" ],
    [ "cache\tjQuery - ajax", "cache" ],
    [ "complete\tjQuery - ajax", "complete.xhr.status" ],
    [ "contentType\tjQuery - ajax", "contentType" ],
    [ "context\tjQuery - ajax", "context" ],
    [ "data\tjQuery - ajax", "data" ],
    [ "dataFilter\tjQuery - ajax", "dataFilter.data.type" ],
    [ "dataType\tjQuery - ajax", "dataType" ],
    [ "error\tjQuery - ajax", "error.xhr.status.error" ],
    [ "global\tjQuery - ajax", "global" ],
    [ "ifModified\tjQuery - ajax", "ifModified" ],
    [ "jsonp\tjQuery - ajax", "jsonp" ],
    [ "jsonpCallback\tjQuery - ajax", "jsonpCallback" ],
    [ "password\tjQuery - ajax", "password" ],
    [ "processData\tjQuery - ajax", "processData" ],
    [ "scriptCharset\tjQuery - ajax", "scriptCharset" ],
    [ "success\tjQuery - ajax", "success.result.status.xhr" ],
    [ "timeout\tjQuery - ajax", "timeout" ],
    [ "traditional\tjQuery - ajax", "traditional" ],
    [ "type\tjQuery - ajax", "type" ],
    [ "url\tjQuery - ajax", "url" ],
    [ "username\tjQuery - ajax", "username" ],
    [ "xhr\tjQuery - ajax", "xhr" ],
  ]
}